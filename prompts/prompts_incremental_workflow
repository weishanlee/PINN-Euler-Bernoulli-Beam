# 🛑 MANDATORY: Incremental PDF Compilation Workflow

┌─────────────────────────────────────────────────────────────────────────┐
│ ⚠️ THIS WORKFLOW IS MANDATORY - DO NOT SKIP ANY STEPS! ⚠️               │
│ You MUST compile a PDF after EVERY section before proceeding!          │
└─────────────────────────────────────────────────────────────────────────┘

## Overview
This document defines the **MANDATORY** incremental workflow system where each section is compiled into its own PDF for review before proceeding to the next section. **FAILURE TO FOLLOW THIS WORKFLOW IS UNACCEPTABLE.**

## Core Principles

1. **Stop-and-Review**: After each section PDF is compiled, STOP and wait for user approval
2. **MANDATORY Single-Column Format**: ALL PDFs must use SINGLE-COLUMN format (no exceptions)
3. **Version Control**: Each revision creates a new version (v1, v2, v3...)
4. **Isolated Bibliographies**: Each section PDF includes only citations used in that section
5. **No Two-Column Format**: Two-column format is PROHIBITED for ALL PDFs
6. **No Skipping**: Cannot proceed to next section without approval

## ⚠️ Content Preservation During Revisions

**CRITICAL**: When creating new versions of sections:
1. **ALWAYS start from the most content-complete version**
2. **NEVER remove citations unless explicitly requested**
3. **Track what changes between versions in a changelog**
4. **If regenerating a section, ensure all previous content is preserved unless specifically being updated**

### Content Preservation Checklist
Before creating a revised version (v2, v3, etc.), verify:
- [ ] All citations from previous version are retained (unless removal requested)
- [ ] All figures/tables from previous version are included
- [ ] All mathematical equations are preserved
- [ ] All subsections remain (unless restructuring requested)
- [ ] File size is similar or larger (significant reduction = content loss)

### Version Changelog Format
Create `section_changelog.txt` for each revised section:
```
=== methods_v2.tex ===
Created: 2024-01-15 10:30
Based on: methods.tex
Changes:
- Added equation 3.4 for boundary conditions
- Expanded section 3.2 with additional algorithm details
- Fixed typo in line 145
Preserved: All 45 citations, all 8 figures, all equations 3.1-3.3

=== methods_v3.tex ===
Created: 2024-01-15 14:20
Based on: methods_v2.tex
Changes:
- Updated figure 3 caption for clarity
- Added new subsection 3.5 on validation
Preserved: All content from v2 intact
```

## Section Compilation Formats

### Two Distinct Approaches

1. **Content-Only Compilation** (DEFAULT)
   - Purpose: Review the section content itself
   - Includes: Section text, equations, figures, references
   - Excludes: Abstract, author info, keywords
   - File naming: section_v1.pdf

2. **Full-Document Compilation**
   - Purpose: See how section looks in final paper context
   - Includes: All frontmatter elements
   - Use only when: Explicitly requested
   - File naming: section_full_v1.pdf

### User Communication
Always state what format you're using:
- "I'll compile just the methods section content for your review"
- "I'll create a full-format version with abstract and authors"

## Workflow Phases

### Phase 1: Initial Setup
1. Determine paper type (competition/journal)
2. Copy appropriate template
3. Read problem/outline
4. Web scraping with verification

### Phase 2: Introduction Section
1. Generate `introduction.tex`
2. **APPEND SECTION CHECKLIST** to both .tex file and for PDF compilation
3. **CRITICAL: Extract section-specific citations**:
   ```bash
   cd output
   ~/.venv/ml_31123121/bin/python ../utilityScripts/extract_section_citations.py \
     --section introduction.tex --master ref.bib --output introduction_refs.bib
   ```
4. Create `introduction_wrapper.tex` using **MANDATORY SINGLE-COLUMN FORMAT**
5. **ENSURE wrapper uses `\bibliography{introduction_refs}` NOT `\bibliography{ref}`**
6. Compile `introduction_v1.pdf` (single-column with checklist at end)
7. Verify PDF bibliography shows ONLY citations from introduction
8. Run `prompts_review_checkpoint` for introduction
9. **STOP** - Display review checklist and questions
10. Wait for user response:
    - If approved → Continue to Phase 3
    - If revision needed → Update and create `introduction_v2.pdf`

### Phase 3: Infographic Design
1. Run `prompts_infographicDesign`
2. Generate `infographic.png`
3. Create simple PDF showing the infographic
4. **STOP** - Ask for approval
5. If revision needed → Create new version

### Phase 4: Methods Section
1. Generate `methods.tex`
2. **APPEND SECTION CHECKLIST** to both .tex file and for PDF compilation
3. **CRITICAL: Extract section-specific citations**:
   ```bash
   ~/.venv/ml_31123121/bin/python ../utilityScripts/extract_section_citations.py \
     --section methods.tex --master ref.bib --output methods_refs.bib
   ```
4. Create `methods_wrapper.tex` using **MANDATORY SINGLE-COLUMN FORMAT**
5. **ENSURE wrapper uses `\bibliography{methods_refs}`**
6. Compile `methods_v1.pdf` (includes checklist at end)
7. Verify PDF bibliography shows ONLY citations from methods
8. Run `prompts_review_checkpoint` for methods
9. **STOP** - Display review checklist and questions
10. Handle approval/revision

### Phase 5: Code Development
1. Generate Python scripts in `output/codes/`
2. Test scripts with minimal data (--test mode)
3. Create summary of what each script does
4. **STOP** - User reviews .py files directly
5. Wait for approval before continuing

### Phase 6: Code Execution Handoff
1. After code approval, test scripts are ready
2. Use `prompts_code_execution_instructions`
3. Provide detailed execution instructions
4. **STOP** - User executes scripts on their system
5. Wait for user to confirm execution complete
6. User provides generated outputs (figures/data)

### Phase 7: Results Section
1. Using user-provided outputs from code execution
2. Generate `resultsAndDiscussions.tex`
3. **APPEND SECTION CHECKLIST** to both .tex file and for PDF compilation
4. **CRITICAL: Extract section-specific citations**:
   ```bash
   ~/.venv/ml_31123121/bin/python ../utilityScripts/extract_section_citations.py \
     --section resultsAndDiscussions.tex --master ref.bib --output results_refs.bib
   ```
5. Create `results_wrapper.tex` using template
6. **ENSURE wrapper uses `\bibliography{results_refs}`**
7. Compile `results_v1.pdf` (includes all figures/tables and checklist)
8. Verify PDF bibliography shows ONLY citations from results
9. Run `prompts_review_checkpoint` for results
10. **STOP** - Display review checklist and questions

### Phase 8: Conclusions Section
1. Generate `conclusions.tex`
2. **APPEND SECTION CHECKLIST** to both .tex file and for PDF compilation
3. **CRITICAL: Extract section-specific citations**:
   ```bash
   ~/.venv/ml_31123121/bin/python ../utilityScripts/extract_section_citations.py \
     --section conclusions.tex --master ref.bib --output conclusions_refs.bib
   ```
4. Create `conclusions_wrapper.tex` using template
5. **ENSURE wrapper uses `\bibliography{conclusions_refs}`**
6. Compile `conclusions_v1.pdf` (includes checklist at end)
7. Verify PDF bibliography shows ONLY citations from conclusions
8. Run `prompts_review_checkpoint` for conclusions
9. **STOP** - Display review checklist and questions

### Phase 9: Competition/Journal Specific Sections

#### For Competitions:
- Summary: `summary_v1.pdf`
- Letter: `letter_v1.pdf`
- Appendices: `appendices_v1.pdf`

#### For Journals:
- Abstract: `abstract_v1.pdf`
- Appendices: `appendices_v1.pdf`

### Phase 10: Final Assembly
Only after ALL sections are approved:

1. **Verify all sections have been approved**:
   - Check version_log.txt for approval status
   - Ensure using latest approved version of each section

2. **Merge all section bibliographies**:
   ```bash
   cd output
   # Combine all section-specific .bib files
   cat introduction_refs.bib methods_refs.bib results_refs.bib conclusions_refs.bib > ref_merged.bib
   
   # Remove duplicates
   sort ref_merged.bib | uniq > ref_final.bib
   
   # Verify merge
   echo "Total entries in final bibliography: $(grep -c '@' ref_final.bib)"
   ```

3. **Update main.tex to include ALL content and merged bibliography**:
   ```latex
   % Include ALL approved section content files
   \input{introduction}              % Already written and approved
   \input{methods}                   % Already written and approved
   \input{resultsAndDiscussions}    % Already written and approved
   \input{conclusions}               % Already written and approved
   % Add any other sections as needed (summary, letter, appendices, etc.)
   
   % Use the merged bibliography at the end
   \bibliography{ref_final}  % Use merged file, not individual sections
   ```

4. **Verify all components are present**:
   - All .tex files from approved sections
   - All figures in output/figures/
   - All tables referenced in sections
   - Merged bibliography file (ref_final.bib)

5. **Compile final main.pdf**:
   ```bash
   pdflatex main.tex
   biber main  # or bibtex main
   pdflatex main.tex
   pdflatex main.tex
   ```

6. **Run master verification**:
   ```bash
   ~/.venv/ml_31123121/bin/python master_verification.py
   ```

**IMPORTANT**: The final PDF assembly does NOT regenerate/rewrite any content. It combines:
- All approved section .tex files (introduction.tex, methods.tex, etc.)
- The merged bibliography from all sections
- Any figures, tables, and other assets
Into one complete document using the main.tex template.

## File Naming Convention

### Section PDFs:
- `introduction_v1.pdf`, `introduction_v2.pdf`, ...
- `methods_v1.pdf`, `methods_v2.pdf`, ...
- `results_v1.pdf`, `results_v2.pdf`, ...

### LaTeX Files:
- `introduction.tex` (content only)
- `introduction_wrapper.tex` (full document with preamble)
- `introduction_refs.bib` (section-specific bibliography)

### Version Tracking:
Create `version_log.txt` to track:
```
2024-01-15 10:30 - introduction_v1.pdf created
2024-01-15 11:15 - introduction_v2.pdf created (revised citations)
2024-01-15 11:45 - introduction_v2.pdf APPROVED
2024-01-15 14:00 - methods_v1.pdf created
```

## 🛑 Stop Point Protocol

**CRITICAL: At each STOP point, you MUST:**

┌─────────────────────────────────────────────────────────────────┐
│ 🛑 STOP! COMPILE PDF BEFORE PROCEEDING! 🛑                      │
└─────────────────────────────────────────────────────────────────┘

1. Display clear message: "📋 REVIEW CHECKPOINT REACHED"
2. Show what was just created
3. Display checklist from `prompts_review_checkpoint`
4. Display specific review questions
5. Ask: "Please review [filename] and respond with:
   - 'approve' to continue to next section
   - 'revise' followed by specific changes needed"
6. Wait for user response
7. **DO NOT proceed without explicit approval**

**Remember: If you skip PDF compilation, you have FAILED to follow instructions!**

## Error Handling

- If compilation fails: Show LaTeX errors and fix before creating PDF
- If citations missing: Note in checklist and ask user how to proceed
- If figures missing: Create placeholder and note in review
- Always maintain previous versions when creating new ones

## MANDATORY: Section Checklist Protocol

**For EVERY section (introduction, methods, results, conclusions, etc.):**
1. After generating the section content
2. BEFORE creating the wrapper file
3. APPEND the comprehensive checklist to the .tex file
4. Include both commented version (for .tex) and visible version (for PDF)
5. The checklist MUST include:
   - Review Items (generic quality checks)
   - Specific Questions (context-specific to the section)
   - Key Updates Made (what was done)
   - Current Status (technical details)

See `prompts/prompts_section_compilation` for the checklist implementation details.

## Benefits

1. **Early Error Detection**: Catch issues immediately
2. **Focused Review**: User reviews one section at a time
3. **Version History**: Track evolution of each section
4. **Quality Control**: Ensure each section meets standards
5. **Flexibility**: Easy to revise individual sections
6. **Built-in Checklists**: Each PDF includes review guidance