# Methods Section Writing Guidelines

## Overview
This guide provides comprehensive instructions for writing the Methods/Theory section for both mathematical modeling competitions and journal papers. The Methods section should explain your mathematical models, algorithms, and implementation details with clarity and academic rigor.

## üìä For Mathematical Modeling Competitions

### Objective
Write a **"Theory and Modeling"** section that thoroughly explains the mathematical models and algorithms used to solve the competition problem. Ensure the section is self-contained, logically structured, and academically detailed.

### üì¶ MANDATORY: Package Documentation
**At the TOP of methods.tex, document ALL LaTeX packages required:**
```latex
% Package requirements for this section:
% - amsmath (for equations, align, matrices)
% - amssymb (for mathematical symbols)
% - algorithm, algorithmic (for algorithm blocks)
% - tikz (for diagrams if any)
% - graphicx (if including method diagrams)
```

**Common packages needed in Methods:**
- `amsmath` - For `\begin{align}`, `\begin{equation}`, matrices
- `algorithm, algorithmic` - For algorithm environments
- `tikz` - For technical diagrams
- `graphicx` - For method architecture diagrams
- `subcaption` - If showing comparative method figures

### Required Components

#### 1. Model Introduction with Breakthrough Focus *(UPDATED)*
- **Present your breakthrough approach** from `output/breakthrough_proposal.md`
- **Explain how it addresses gaps** identified in `output/research_gaps_analysis.md`
- **Develop correct theorems and formulas** that specifically fulfill the gaps critiqued in Introduction
- **Detail the innovation**:
  - How existing methods are combined/extended
  - Novel mathematical formulations introduced
  - Theoretical advances made
  - Mathematical foundations with proper citations using `prompts/prompts_webScraping` references
- **Justify superiority** over existing approaches with concrete comparisons
- **Include visual representations**:
  - Workflow diagrams showing algorithm flow
  - Architecture diagrams for coding scripts
  - Mechanism diagrams explaining theorem operations
  - Use professional tools (tikz, draw.io, matplotlib)

### üî¥ MANDATORY: Sentence-Level Verification for Methods
**EVERY SENTENCE in this section must be verified:**
- ‚úì **Theorem Development**: Must address specific gaps identified in Introduction critique section
- ‚úì **Mathematical Claims**: Must show derivation or cite theorem source from `output/papers/`
- ‚úì **Algorithm Statements**: Must trace to specific literature or be original with justification
- ‚úì **Parameter Choices**: Must cite source or provide empirical justification
- ‚úì **Complexity Claims**: Must show proof or cite established analysis
- ‚úì **Comparative Statements**: Must have quantitative evidence or citations
- ‚úì **Gap Fulfillment**: Each theorem MUST explicitly state which literature gap it addresses
- ‚úì **Code Implementation Consistency**: EVERY mathematical formula and algorithm in the methods section MUST be accurately implemented in the corresponding code files
- ‚úì **No Method-Code Mismatch**: The code MUST reflect the EXACT methods described - you cannot describe one approach in the methods while implementing a different approach in code

**VERIFICATION PROCESS:**
- For EVERY theorem, add comment: `% Addresses Gap: [gap from Introduction critique] % Citation: [source]`
- For EVERY mathematical statement, add comment: `% Derivation: [source or "original derivation follows"]`
- For EVERY algorithm step, add comment: `% Source: [paper2023, Algorithm 2] or "novel step because..."`
- For EVERY parameter value, add comment: `% Justified by: [citation] or [empirical testing]`
- For EVERY diagram, add comment: `% Shows: [workflow/architecture/mechanism] for [specific theorem/algorithm]`
- If no justification exists, either DELETE or mark as "requires empirical validation"

**PROHIBITED CONTENT:**
- ‚ùå Theorems that don't address identified gaps
- ‚ùå Unproven mathematical statements
- ‚ùå Algorithm steps without justification
- ‚ùå "It is well known that..." without citation
- ‚ùå Parameter values without source or testing
- ‚ùå Complexity claims without proof
- ‚ùå Exaggerated performance claims
- ‚ùå Missing visual representations of key concepts

- **Cite literature properly** using `\cite{}`
  - Use information-prominent style: "The optimization approach [1] shows..."
  - Avoid author-prominent style: "Warner et al. (1991) showed..."
  - Example BibTeX entry:
    ```bibtex
    @article{warner1991,
      author  = {Warner, J. and Smith, K.},
      title   = {A study on modeling techniques in competition problems},
      journal = {Journal of Applied Mathematics},
      year    = {1991},
      volume  = {45},
      pages   = {123‚Äì135},
      doi     = {10.1234/jam.1991.045},
      %url    = {http://example.com/paper}  % internal check only
    }
    ```

#### 2. Solution Strategies
- **Step-by-step methodology** for applying the models
- **Include theorems, proofs, and key formulae**
- **Assumptions and Justifications** subsection covering:
  - Model approximations and simplifications
  - Rationale for each assumption
- **Algorithm parameters** (if applicable):
  - Population size, termination criteria
  - Crossover/mutation probabilities
  - Learning rates, convergence thresholds
- **Workflow diagram** featuring:
  - Clear module separation
  - Logical flow sequence
  - Professional design with consistent styling

#### 3. Mathematical Representation
- **LaTeX-formatted equations** for all models
- **Symbol notation table**:
  ```latex
  \begin{table}[H]
  \centering
  \caption{Symbol Descriptions}
  \label{tab:symbols}
  \begin{tabular}{ll}
  \hline
  \textbf{Symbol} & \textbf{Description} \\ \hline
  $x$ & Decision variable representing... \\
  $y$ & Objective function value... \\
  $\alpha$ & Learning rate parameter... \\
  $\beta$ & Discount factor... \\
  \hline
  \end{tabular}
  \end{table}
  ```

#### 4. Algorithm Pseudo-Code
- **Clear algorithmic representation** for each model
- **Example format**:
  ```latex
  \begin{algorithm}[H]
  \small
  \setstretch{0.9}
  \caption{Your Algorithm Name}
  \label{alg:algorithm_name}
  \begin{algorithmic}[1]
  \Require Input parameters: $X$, $\theta$, $\epsilon$
  \Ensure Optimized solution $X^*$
  \State Initialize: $X_0 \leftarrow$ initial guess
  \State Set: $t \leftarrow 0$
  \While{not converged}
    \State Update: $X_{t+1} \leftarrow f(X_t, \theta)$
    \State Check: convergence $\leftarrow ||X_{t+1} - X_t|| < \epsilon$
    \State $t \leftarrow t + 1$
  \EndWhile
  \State \Return $X^* = X_t$
  \end{algorithmic}
  \end{algorithm}
  ```

#### 5. Python Implementation
- **Complete Python code** for each model in `output/codes/`
- **Include**:
  - Clear function documentation
  - Input/output specifications
  - Example usage
  - Test mode functionality
- **Data handling**:
  - Use real data from `data/` folder if available
  - Generate synthetic data for testing
  - Display sample data in LaTeX tables

### üõ°Ô∏è MANDATORY: Bug-Free Code Validation
**CRITICAL**: Every script MUST be thoroughly validated before handoff.

#### Validation Requirements:
1. **Test Mode Implementation** (MANDATORY for EVERY script):
   ```python
   import argparse
   import sys
   from pathlib import Path
   
   def run_tests():
       """Comprehensive test suite"""
       print("üß™ Running validation tests...")
       
       # Test imports
       try:
           import numpy as np
           import pandas as pd
           # Add all required imports
           print("‚úÖ Import test passed")
       except ImportError as e:
           print(f"‚ùå Import failed: {e}")
           return False
       
       # Test data paths
       for path in ["output/data", "output/figures", "output/models"]:
           Path(path).mkdir(parents=True, exist_ok=True)
       print("‚úÖ Directory structure verified")
       
       # Test core functionality with minimal data
       try:
           test_data = generate_test_data(n=10)
           result = process_model(test_data, test_mode=True)
           assert result is not None
           print("‚úÖ Core functionality passed")
       except Exception as e:
           print(f"‚ùå Core test failed: {e}")
           return False
       
       # Test edge cases
       test_edge_cases()
       
       print("\n‚úÖ ALL TESTS PASSED")
       return True
   
   if __name__ == "__main__":
       parser = argparse.ArgumentParser()
       parser.add_argument("--test", action="store_true", help="Run tests")
       parser.add_argument("--full", action="store_true", help="Full run")
       args = parser.parse_args()
       
       if args.test:
           success = run_tests()
           sys.exit(0 if success else 1)
       elif args.full:
           main()
       else:
           parser.print_help()
   ```

2. **Edge Case Testing** (MANDATORY for ALL scripts):
   ```python
   def test_edge_cases():
       """Test all edge cases before handoff"""
       # Empty data
       try:
           result = process_model(pd.DataFrame(), test_mode=True)
           print("‚úÖ Empty data handled")
       except ValueError as e:
           print("‚úÖ Empty data raises appropriate error")
       
       # Single data point
       single_point = pd.DataFrame({'x': [1], 'y': [2]})
       result = process_model(single_point, test_mode=True)
       assert result is not None, "Single point failed"
       
       # Missing values
       data_nan = pd.DataFrame({'x': [1, np.nan, 3], 'y': [4, 5, np.nan]})
       result = process_model(data_nan, test_mode=True)
       assert not result.isna().any().any(), "NaN not handled"
       
       # Extreme values
       extreme_data = pd.DataFrame({
           'x': [1e10, 1e-10, 0],
           'y': [-1e10, 1e-10, 0]
       })
       result = process_model(extreme_data, test_mode=True)
       assert np.isfinite(result).all(), "Extreme values not handled"
   ```

3. **Memory and Runtime Estimation**:
   ```python
   def estimate_resources(data_size):
       """Estimate memory and runtime"""
       memory_gb = data_size * 8 * n_features / 1e9
       runtime_min = data_size * complexity_factor / 60
       return memory_gb, runtime_min
   ```

4. **Progress Indicators and Logging**:
   ```python
   from tqdm import tqdm
   import logging
   
   logging.basicConfig(
       filename='output/logs/method_name.log',
       level=logging.INFO,
       format='%(asctime)s - %(message)s'
   )
   ```

#### Pre-Handoff Checklist:
- [ ] All scripts have --test mode
- [ ] Syntax validation passed (`python -m py_compile`)
- [ ] Import verification completed in correct venv
- [ ] Test mode runs successfully with <100 data points
- [ ] Edge cases handled properly (empty data, NaN, extreme values)
- [ ] Error messages are clear and actionable
- [ ] Progress indicators work (tqdm or print statements)
- [ ] Logging system functional (output/logs/)
- [ ] Memory usage estimated and documented
- [ ] Execution dependencies documented
- [ ] validation_checklist.py created and passes
- [ ] generate_execution_plan.py created and runs
- [ ] execution_tracker.py created for progress monitoring
- [ ] EXECUTION_INSTRUCTIONS.md generated with step-by-step guide
- [ ] All expected outputs documented for each script

#### 6. Sensitivity Analysis
- **For Competition Papers**: MANDATORY - Must include comprehensive sensitivity analysis
- **For Journal Papers**: Analyze necessity based on research topic:
  - Required if: optimization problems, parameter-dependent models, uncertainty quantification
  - Optional if: purely theoretical proofs, deterministic algorithms with no parameters
  - Consider journal expectations and field standards
- **If required, include**:
  - Parameter ranges to test (justify ranges with citations)
  - Sensitivity metrics (e.g., Sobol indices, partial derivatives)
  - Visualization of results (tornado diagrams, spider plots)
  - Interpretation and implications for model robustness
  - Connection to theorem validity under parameter variations

### LaTeX Structure Template

```latex
\section{Theories and Mathematical Models}

\subsection{Our Breakthrough Approach}
% Present the innovative methodology from breakthrough_proposal.md
% Explain how it differs from and improves upon existing methods
% Show mathematical formulation of the innovation

\subsection{Assumptions and Justification}
% Explain all model assumptions and their rationale
% Justify why certain assumptions can be relaxed due to your innovation

\subsection{Notations}
% Include the symbol table here

\subsection{Model for Problem 1: [Descriptive Name]}
\subsubsection{Traditional Approach Limitations}
% Brief recap of why existing methods fail (from gap analysis)
\subsubsection{Our Novel Formulation}
% How your breakthrough approach handles this problem
\subsubsection{Mathematical Development}
% Detailed mathematical formulation
\subsubsection{Solution Algorithm}
% Algorithm description and pseudo-code
\subsubsection{Implementation}
% Key implementation details

\subsection{Model for Problem 2: [Descriptive Name]}
% Repeat structure as above

\subsection{Model for Problem 3: [Descriptive Name]}
% Repeat structure as above

\subsection{Sensitivity Analysis}
% If applicable
```

### Important Guidelines
- **Writing style**: Maintain academic tone and logical flow
  - **FOR JOURNAL PAPERS**: Use continuous narrative prose
  - Avoid excessive bullet points - integrate into paragraphs
  - See `prompts/prompts_writing_style_journal` for narrative guidance
- **Code presentation**: 
  - Python code in separate code blocks
  - BibTeX entries in separate blocks
  - Clear comments and documentation
- **LaTeX notes**:
  - Do NOT include `\documentclass`, `\usepackage`, or preamble
  - Focus only on section content
  - Use standard LaTeX math environments

---

## üìö For Peer-Reviewed Journal Papers

### Objective
Write a **"Methods" or "Methodology"** section (check journal template for exact title) that explains your research methods, models, and analytical approaches with the rigor expected in peer-reviewed publications.

### üì¶ MANDATORY: Package Documentation
**At the TOP of methods.tex, document ALL LaTeX packages required:**
```latex
% Package requirements for this section:
% - amsmath (for equations, align, matrices)
% - amssymb (for mathematical symbols)
% - algorithm, algorithmic (for algorithm blocks)
% - tikz (for diagrams if any)
% - graphicx (if including method diagrams)
% - subcaption (for comparative figures)
```

**Journal-specific packages to check:**
- Template may pre-load some packages
- Check compatibility with journal class
- Some journals prefer specific algorithm packages

### Required Components

#### 1. Theoretical Framework with Innovation *(UPDATED)*
- **Present your breakthrough theoretical basis** from `output/breakthrough_proposal.md`
- **Connect to literature** showing how you extend/combine existing work
- **Develop theorems that directly address gaps** from Introduction critique:
  - Each theorem must state: "This addresses Gap X identified in Section Y"
  - Show mathematical proofs with proper citations
  - Demonstrate how theorem overcomes previous limitations
- **Explain novelty** - emphasize the specific innovation:
  - New mathematical formulations
  - Novel combinations of existing theories
  - Paradigm shifts in approach
- **Visual representations MANDATORY**:
  - Theorem mechanism diagrams
  - Algorithm workflow charts
  - System architecture figures
- **Contrast with existing methods** - show clear advantages
- **State assumptions** explicitly and justify relaxations

#### 2. Methodology Details
- **Research design** overview
- **Data collection/generation** procedures
- **Model development** with mathematical rigor
- **Validation approach**
- **Statistical methods** (if applicable)
- **Computational methods** with parameters

#### 3. Mathematical Formulation
- **Formal mathematical models**
- **Derivations** of key equations
- **Notation table** as shown above
- **Constraints and boundary conditions**

#### 4. Implementation Details
- **Algorithm descriptions** with pseudo-code
- **Computational complexity** analysis
- **Software/tools** used
- **Reproducibility** information

#### 5. Code and Data
- **Key algorithms** in Python
- **Data preprocessing** steps
- **Experimental setup**
- **Parameter settings**

#### 6. Validation and Sensitivity
- **Model validation** procedures
- **Sensitivity analysis** methodology
- **Robustness checks**
- **Limitations** of the approach

### LaTeX Structure Template

```latex
\section{Methods}  % or \section{Methodology} - check journal style

\subsection{Theoretical Framework}
% Theoretical foundations and literature connection

\subsection{Model Development}
% Mathematical models and formulations

\subsection{Computational Methods}
% Algorithms and implementation

\subsection{Experimental Design}
% Data, parameters, and validation

\subsection{Statistical Analysis}
% If applicable
```

**IMPORTANT**: Always use the section structure from the journal's LaTeX template if provided. The above is a general guide.

### Journal-Specific Considerations
- **Check journal guidelines** for:
  - Preferred section titles
  - Equation numbering style
  - Citation format
  - Word/page limits
- **Follow journal template** exactly
- **Include reproducibility** information
- **Address reviewer concerns** proactively

### Output Requirements
- LaTeX content only (no preamble)
- Python code in separate blocks
- BibTeX entries in separate blocks
- Professional academic writing throughout

## üîç Methods Section Double-Check Protocol

### Before Submitting Methods Section:

1. **Code Verification**
   ```bash
   # Test all implementations
   for script in output/codes/*.py; do
       ~/.venv/ml_31123121/bin/python "$script" --test || exit 1
   done
   ```

2. **Execution Handoff Check**
   ```bash
   # If ANY of these conditions met ‚Üí IMMEDIATE HANDOFF
   grep -E "(model\.fit|trainer\.train|epochs?.*=|for.*range\(10{3,}\))" output/codes/*.py
   
   # MANDATORY validation steps before handoff:
   
   # Step 1: Run comprehensive validation
   ~/.venv/ml_31123121/bin/python output/codes/validation_checklist.py
   
   # Step 2: Generate execution plan with dependencies
   ~/.venv/ml_31123121/bin/python output/codes/generate_execution_plan.py
   
   # Step 3: Create tracking system
   ~/.venv/ml_31123121/bin/python output/codes/execution_tracker.py --show
   
   # Step 4: Generate detailed instructions
   ~/.venv/ml_31123121/bin/python output/codes/generate_instructions.py
   
   # Step 5: Verify all helper scripts exist
   ls -la output/codes/{validation_checklist,generate_execution_plan,execution_tracker}.py
   ls -la output/EXECUTION_INSTRUCTIONS.md
   ```

3. **LaTeX Compilation Test**
   ```bash
   # Test compile just methods section
   cd output
   echo "\documentclass{article}\begin{document}" > test_methods.tex
   cat methods.tex >> test_methods.tex
   echo "\end{document}" >> test_methods.tex
   pdflatex test_methods.tex
   ```

4. **Content Checklist**
   - [ ] All models clearly explained
   - [ ] Equations properly numbered
   - [ ] Symbol table complete
   - [ ] Pseudo-code matches implementation
   - [ ] All assumptions stated
   - [ ] Workflow diagram included
   - [ ] No undefined references
   - [ ] **NEW: All scripts validated with --test mode**
   - [ ] **NEW: Execution dependencies documented**
   - [ ] **NEW: Progress tracking implemented**

5. **Cross-Reference Check**
   - [ ] Methods align with introduction claims
   - [ ] All cited methods have references
   - [ ] Code files referenced correctly
   - [ ] Consistent notation throughout
   - [ ] **NEW: Code implementations match mathematical descriptions**
   - [ ] **NEW: No discrepancy between .tex formulas and .py algorithms**

### MANDATORY: Section Review Checklist
After completing the methods.tex, append this checklist template:

```latex
%% ========== SECTION REVIEW CHECKLIST ==========
%% Methods Section Checklist:
%% 
%% Review Items:
%% - All models/algorithms are clearly explained
%% - Mathematical notation is consistent
%% - Symbol table is complete  
%% - Assumptions are explicitly stated
%% - Pseudocode matches planned implementation
%% - Workflow diagram is included
%% - Sensitivity analysis plan is appropriate
%% 
%% Specific Questions:
%% 1. Are the mathematical models appropriate for solving the [SPECIFIC PROBLEM]?
%% 2. Do the algorithms have clear termination conditions?
%% 3. Are there any missing parameters or assumptions?
%% 4. Is the methodology reproducible based on this description?
%% 
%% Key Updates Made:
%% - Developed [list models/algorithms]
%% - Included workflow diagram for [process name]
%% - Defined [X] equations and [Y] algorithms
%% - Cited [Z] methodological references
%% 
%% Current Status:
%% - [X]-page PDF with mathematical details
%% - All equations properly formatted
%% - Symbol table included
%% - Ready for code implementation
%% ========== END SECTION REVIEW CHECKLIST ==========
```

Also add a visible version for the PDF:
```latex
\clearpage
\section*{Review Checklist}
\begin{small}
\begin{verbatim}
[Insert the checklist content without %% comment marks]
\end{verbatim}
\end{small}
```