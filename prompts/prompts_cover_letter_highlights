# Cover Letter and Highlights Generation for Journal Submissions

## üéØ Purpose
This document provides instructions for generating Cover Letter and Highlights documents for journal paper submissions. These documents are ONLY for journal papers, NOT for competitions.

## üìã Prerequisites
Before starting:
- [ ] main.pdf has been successfully compiled
- [ ] Post-compilation file listing completed
- [ ] Target journal has been identified
- [ ] All section files are finalized

## üîç Detailed Journal Requirements Research Process

### Step 1: Research Journal Requirements
```bash
# Use Playwright to search for journal-specific requirements
echo "Searching for cover letter and highlights requirements for [JOURNAL NAME]..."

# Example searches to perform:
# 1. "[Journal Name] cover letter requirements"
# 2. "[Journal Name] highlights format"
# 3. "[Journal Name] submission guidelines"
# 4. "[Journal Name] author guidelines highlights"
```

**CRITICAL**: Use Playwright MCP to:
1. Visit the journal's official website
2. Find submission guidelines page
3. Extract specific requirements for:
   - Cover letter format and content
   - Highlights structure and length
   - Any specific elements required by the journal

### Step 2: Generate Cover Letter (.odt)
```bash
cd output

# Create cover_letter.odt with the following structure:
# 1. Editor's name and journal information
# 2. Paper title and manuscript type
# 3. Brief summary (2-3 sentences)
# 4. Importance and novelty (3-4 bullet points)
# 5. Fit with journal scope
# 6. Declaration statements
# 7. Suggested reviewers (if required)
```

**Cover Letter MUST include**:
- Paper title
- Why this work is important
- Key merits and contributions
- Quintessence of the research
- How it advances the field
- Why it fits the journal's scope

### Step 3: Generate Highlights (.odt)
```bash
# Create highlights.odt with:
# - Maximum 5-6 bullet points
# - Each point 85 characters or less (including spaces)
# - Present tense, self-contained statements
# - No jargon or abbreviations
```

**Highlights MUST**:
- Capture the essence of your research
- Be understandable to a broad audience
- Emphasize novelty and significance
- Follow journal-specific formatting

### Step 4: Content Review Process
Before generating these documents, THOROUGHLY review:
1. All section .tex files (especially abstract, introduction, conclusions)
2. Research breakthrough documentation
3. Title and key findings
4. Innovation metrics

**IMPORTANT**: These documents are ONLY for journal submissions, NOT for competitions!

## üîç Step 1: Research Journal Requirements

### Using Playwright to Find Requirements
```python
# Example Playwright search for journal requirements
import asyncio
from playwright.async_api import async_playwright

async def search_journal_requirements(journal_name):
    """Search for cover letter and highlights requirements"""
    async with async_playwright() as p:
        browser = await p.chromium.launch(headless=False)
        page = await browser.new_page()
        
        # Search patterns
        searches = [
            f"{journal_name} author guidelines",
            f"{journal_name} cover letter requirements",
            f"{journal_name} highlights format",
            f"{journal_name} submission checklist"
        ]
        
        results = {}
        for search in searches:
            await page.goto(f"https://www.google.com/search?q={search}")
            # Extract relevant information
            # Navigate to official journal page if found
        
        await browser.close()
        return results
```

### Common Journal Requirements to Look For:

#### Cover Letter Requirements:
1. **Length**: Usually 1-2 pages
2. **Required Elements**:
   - Editor's name and title
   - Manuscript title and type
   - Brief summary of findings
   - Significance statement
   - Fit with journal scope
   - Conflict of interest statement
   - Suggested reviewers (sometimes)

#### Highlights Requirements:
1. **Number**: Typically 3-5 bullet points (max 6)
2. **Length**: Often 85 characters per point (including spaces)
3. **Style**: Present tense, self-contained
4. **Content**: Key findings, novelty, significance

### Example Journal-Specific Formats:

#### Elsevier Journals:
- Highlights: 3-5 bullet points, max 85 characters each
- Cover letter: Standard format with novelty emphasis

#### Nature Journals:
- Cover letter: Strong emphasis on breakthrough significance
- No separate highlights (incorporated in abstract)

#### IEEE Journals:
- Cover letter: Technical merit focus
- Highlights: Often not required

## üìù Step 2: Content Extraction from main.tex

### Extract Key Information
```python
import re

def extract_paper_content(output_dir):
    """Extract key information from compiled paper"""
    
    content = {
        'title': '',
        'abstract': '',
        'key_findings': [],
        'innovations': [],
        'methods': [],
        'conclusions': []
    }
    
    # Read main.tex to get title
    with open(f"{output_dir}/main.tex", 'r') as f:
        main_content = f.read()
        title_match = re.search(r'\\title\{([^}]+)\}', main_content)
        if title_match:
            content['title'] = title_match.group(1)
    
    # Read abstract
    if os.path.exists(f"{output_dir}/abstract.tex"):
        with open(f"{output_dir}/abstract.tex", 'r') as f:
            content['abstract'] = f.read()
    
    # Extract key findings from results
    if os.path.exists(f"{output_dir}/resultsAndDiscussions.tex"):
        with open(f"{output_dir}/resultsAndDiscussions.tex", 'r') as f:
            results_content = f.read()
            # Extract significant results
    
    # Read breakthrough documentation
    if os.path.exists(f"{output_dir}/breakthrough_proposal.md"):
        with open(f"{output_dir}/breakthrough_proposal.md", 'r') as f:
            content['innovations'] = extract_innovations(f.read())
    
    return content
```

## üìÑ Step 3: Generate Cover Letter (.odt)

### Cover Letter Template Structure
```python
from odf.opendocument import OpenDocumentText
from odf.style import Style, TextProperties, ParagraphProperties
from odf.text import P, Span
import datetime

def create_cover_letter(journal_info, paper_content):
    """Generate cover letter in ODT format"""
    
    doc = OpenDocumentText()
    
    # Add styles
    # ... style definitions ...
    
    # Header with author information
    date_str = datetime.date.today().strftime("%B %d, %Y")
    doc.text.addElement(P(text=date_str))
    doc.text.addElement(P(text=""))
    
    # Editor information
    doc.text.addElement(P(text=f"Dear {journal_info['editor_name']},"))
    doc.text.addElement(P(text=f"Editor-in-Chief"))
    doc.text.addElement(P(text=f"{journal_info['journal_name']}"))
    doc.text.addElement(P(text=""))
    
    # Opening paragraph
    opening = f"We are pleased to submit our manuscript entitled \"{paper_content['title']}\" for consideration for publication in {journal_info['journal_name']}."
    doc.text.addElement(P(text=opening))
    doc.text.addElement(P(text=""))
    
    # Brief summary (2-3 sentences)
    summary_para = P(text="In this work, we present ")
    # Add paper summary
    doc.text.addElement(summary_para)
    doc.text.addElement(P(text=""))
    
    # Significance and novelty (3-4 bullet points)
    doc.text.addElement(P(text="The key contributions of our work include:"))
    for contribution in paper_content['key_contributions']:
        doc.text.addElement(P(text=f"‚Ä¢ {contribution}"))
    doc.text.addElement(P(text=""))
    
    # Fit with journal
    fit_text = f"This research aligns well with {journal_info['journal_name']}'s scope in {journal_info['scope_areas']}."
    doc.text.addElement(P(text=fit_text))
    doc.text.addElement(P(text=""))
    
    # Standard declarations
    declarations = [
        "We confirm that this work is original and has not been published elsewhere, nor is it currently under consideration for publication elsewhere.",
        "All authors have approved the manuscript and agree with its submission.",
        "We have no conflicts of interest to disclose.",
        "All data and materials are available upon request."
    ]
    
    for declaration in declarations:
        doc.text.addElement(P(text=declaration))
        doc.text.addElement(P(text=""))
    
    # Suggested reviewers (if required)
    if journal_info.get('requires_reviewers'):
        doc.text.addElement(P(text="We suggest the following reviewers for this manuscript:"))
        # Add reviewer suggestions
    
    # Closing
    doc.text.addElement(P(text="Thank you for considering our manuscript. We look forward to hearing from you."))
    doc.text.addElement(P(text=""))
    doc.text.addElement(P(text="Sincerely,"))
    doc.text.addElement(P(text=""))
    doc.text.addElement(P(text="Wei Shan Lee"))
    doc.text.addElement(P(text="Corresponding Author"))
    
    # Save document
    doc.save(f"{output_dir}/cover_letter.odt")
    print(f"Cover letter saved to {output_dir}/cover_letter.odt")
```

### Key Elements to Emphasize:

1. **Opening Impact**: Clear statement of submission intent
2. **Significance**: Why this work matters to the field
3. **Innovation**: What's new compared to existing work
4. **Journal Fit**: How it aligns with journal scope
5. **Professional Tone**: Confident but not overselling

## üí° Step 4: Generate Highlights (.odt)

### Highlights Generation
```python
def create_highlights(paper_content, journal_format):
    """Generate highlights document in ODT format"""
    
    doc = OpenDocumentText()
    
    # Title
    doc.text.addElement(P(text="Highlights", stylename="Heading1"))
    doc.text.addElement(P(text=""))
    
    # Generate highlights from content
    highlights = generate_highlight_points(paper_content)
    
    # Format according to journal requirements
    formatted_highlights = []
    for highlight in highlights[:journal_format['max_highlights']]:
        # Ensure length compliance
        if len(highlight) > journal_format['max_chars']:
            highlight = truncate_intelligently(highlight, journal_format['max_chars'])
        formatted_highlights.append(highlight)
    
    # Add to document
    for highlight in formatted_highlights:
        doc.text.addElement(P(text=f"‚Ä¢ {highlight}"))
    
    # Save document
    doc.save(f"{output_dir}/highlights.odt")
    print(f"Highlights saved to {output_dir}/highlights.odt")

def generate_highlight_points(content):
    """Generate highlight points from paper content"""
    highlights = []
    
    # Extract from different sources
    # 1. Main innovation
    if content['innovations']:
        highlights.append(f"Novel {content['innovations'][0]} addresses critical gap")
    
    # 2. Key method
    if content['methods']:
        highlights.append(f"Introduces {content['methods'][0]} for improved performance")
    
    # 3. Main result
    if content['key_findings']:
        highlights.append(f"Achieves {content['key_findings'][0]} improvement")
    
    # 4. Practical impact
    highlights.append(f"Enables practical application in {content['application_area']}")
    
    # 5. Theoretical contribution
    highlights.append(f"Provides theoretical foundation for {content['theory_aspect']}")
    
    return highlights
```

### Highlights Best Practices:

1. **Start with Action Verbs**: "Develops", "Introduces", "Demonstrates"
2. **Be Specific**: Include quantitative improvements when possible
3. **Avoid Jargon**: Understandable to broad audience
4. **Self-Contained**: Each point stands alone
5. **Present Tense**: Active voice throughout

### Example Highlights:

**Good Examples**:
- "Develops hybrid neural-evolutionary algorithm reducing complexity by 45%"
- "First framework combining hyperbolic embeddings with linear scaling"
- "Achieves 3x speedup on graphs with >1M nodes"
- "Validates approach on 5 real-world urban traffic datasets"
- "Opens new research direction in adaptive graph analysis"

**Poor Examples**:
- "We present a new method" (too vague)
- "Our approach is innovative" (subjective claim)
- "Results are discussed" (passive, uninformative)

## üîç Step 5: Review and Validation

### Validation Checklist
```python
def validate_documents(cover_letter_path, highlights_path, journal_requirements):
    """Validate generated documents against journal requirements"""
    
    validations = {
        'cover_letter': {
            'exists': os.path.exists(cover_letter_path),
            'has_title': False,
            'has_significance': False,
            'has_declarations': False,
            'appropriate_length': False
        },
        'highlights': {
            'exists': os.path.exists(highlights_path),
            'correct_number': False,
            'length_compliance': False,
            'format_correct': False
        }
    }
    
    # Validate cover letter content
    # ... validation logic ...
    
    # Validate highlights
    # ... validation logic ...
    
    return validations
```

## üìä Common Mistakes to Avoid

1. **Cover Letter**:
   - Being too technical (editors are not always specialists)
   - Overselling or using superlatives
   - Generic statements that could apply to any paper
   - Forgetting journal-specific elements

2. **Highlights**:
   - Exceeding character limits
   - Using undefined abbreviations
   - Making vague claims
   - Focusing on methods rather than outcomes

## üéØ Final Output

After completing all steps, you should have:
1. `output/cover_letter.odt` - Professional cover letter tailored to journal
2. `output/highlights.odt` - Concise research highlights
3. Validation that both meet journal requirements

**CRITICAL REMINDERS**:
- These documents are ONLY for journal papers
- Always check journal-specific requirements first
- Review against actual paper content
- Maintain professional tone throughout
- Save in .odt format, NOT .tex or .pdf