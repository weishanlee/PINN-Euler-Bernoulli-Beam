# prompts_version_naming_rules

## MANDATORY: Sequential Version Naming System

### Core Principle
EVERY file created or modified MUST follow sequential version numbering. This is NOT optional.

### Naming Convention
```
<base_name>_v<number>.<extension>
```

## Concrete Examples

### LaTeX Files
```bash
# Initial creation
introduction_v1.tex

# First revision
introduction_v2.tex

# Second revision
introduction_v3.tex

# WRONG - Never use these patterns:
introduction_update.tex      ❌
introduction_revised.tex     ❌
introduction_final.tex       ❌
introduction_modified.tex    ❌
```

### Python Scripts
```bash
# Initial creation
data_analysis_v1.py

# Adding new features
data_analysis_v2.py

# Bug fixes
data_analysis_v3.py

# WRONG patterns:
data_analysis_updated.py     ❌
analysis_new.py              ❌
analysis_fixed.py            ❌
```

### Figures
```bash
# Initial figure
results_plot_v1.png

# Updated with new data
results_plot_v2.png

# Changed colors/styling
results_plot_v3.png

# WRONG patterns:
results_plot_final.png       ❌
plot_revised.png             ❌
figure_new.png               ❌
```

### PDF Compilations
```bash
# Section PDFs
introduction_v1.pdf
introduction_v2.pdf
methods_v1.pdf
methods_v2.pdf

# Main PDF versions
main_v1.pdf
main_v2.pdf
```

### Helper and Test Files
```bash
# Wrapper files
introduction_v1_wrapper.tex
introduction_v2_wrapper.tex

# Test scripts
validation_v1_test.py
validation_v2_test.py

# Helper scripts
data_cleaning_v1_helper.py
data_cleaning_v2_helper.py
```

## Implementation Examples

### Creating First File
```python
# When creating ANY new file
filename = "introduction_v1.tex"  # ALWAYS start with v1
```

### Updating Existing File
```python
# When modifying introduction_v2.tex
# DON'T overwrite it!
# Instead, create:
new_filename = "introduction_v3.tex"
```

### Peer Review Revisions
```bash
# Original file
methods_v1.tex

# After first review
methods_v2.tex

# After second review
methods_v3.tex

# Review reports also versioned
methods_peer_review_v1.md
methods_peer_review_v2.md
```

### Code Execution Outputs
```bash
# Script versions
model_training_v1.py
model_training_v2.py  # Fixed timeout issues
model_training_v3.py  # Added progress tracking

# Output data versioned too
results_v1.csv
results_v2.csv
model_weights_v1.pkl
model_weights_v2.pkl
```

## Special Cases

### Multiple Files of Same Type
```bash
# Different base names, each with versions
pca_analysis_v1.py
pca_analysis_v2.py

clustering_analysis_v1.py
clustering_analysis_v2.py
```

### Compilation Wrappers
```bash
# Section compilation wrappers
introduction_v1_wrapper.tex    # For introduction_v1.tex
introduction_v2_wrapper.tex    # For introduction_v2.tex

# Bibliography files
introduction_refs_v1.bib
introduction_refs_v2.bib
```

### Emergency Recovery Files
```bash
# Even recovery files need versions
introduction_v3_recovery.tex
bibliography_v2_backup.bib
```

## Version Selection During Assembly

When assembling final PDF:
```bash
# System detects all versions
introduction_v1.tex (45 citations)
introduction_v2.tex (48 citations)
introduction_v3.tex (30 citations) # WARNING: content loss

# Selection based on content analysis
# Not just latest version!
```

## Common Mistakes to Avoid

### ❌ WRONG: Descriptive suffixes
```bash
methods_final.tex
methods_corrected.tex
methods_updated.tex
results_new.tex
```

### ✅ CORRECT: Sequential versions
```bash
methods_v1.tex
methods_v2.tex
methods_v3.tex
methods_v4.tex
```

### ❌ WRONG: Overwriting files
```python
# DON'T DO THIS
with open("analysis_v1.py", "w") as f:
    f.write(updated_code)  # Overwrites v1!
```

### ✅ CORRECT: Create new version
```python
# DO THIS
with open("analysis_v2.py", "w") as f:
    f.write(updated_code)  # Preserves v1
```

## Integration with Other Systems

### Bibliography Extraction
```bash
# Extract from specific version
python extract_section_citations.py introduction_v2.tex

# Output is also versioned
introduction_refs_v2.bib
```

### Figure Validation
```bash
# Validate specific version
python box_overlap_checker.py architecture_v3.png

# If fixes needed, create v4
architecture_v4.png
```

### Package Detection
```bash
# Scan specific versions
python detect_required_packages.py methods_v2.tex

# Report includes version info
package_requirements_v2_report.json
```

## Enforcement Checklist

Before ANY file operation:
1. ✓ Is this a new file? → Use v1
2. ✓ Does file exist? → Check highest version
3. ✓ Making changes? → Increment version
4. ✓ Helper file? → Include version in name
5. ✓ Never overwrite existing versions

## Version History Tracking

Example progression:
```
introduction_v1.tex  - Initial draft
introduction_v2.tex  - Added more citations
introduction_v3.tex  - Peer review corrections
introduction_v4.tex  - Final grammar fixes
introduction_v5.tex  - Journal-specific formatting
```

Each version preserved for:
- Rollback capability
- Change tracking
- Review history
- Quality assurance

## REMINDER

This versioning system is MANDATORY, not optional. It applies to:
- Every file you create
- Every file you modify
- Every output you generate
- Every intermediate result

No exceptions!