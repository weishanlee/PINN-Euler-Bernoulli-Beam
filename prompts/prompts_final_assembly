# Final PDF Assembly Instructions

## 🎯 Purpose
This document provides instructions for assembling the final PDF after all individual sections have been approved. The final assembly combines all content and bibliographies WITHOUT regenerating or rewriting any content.

## 📋 MANDATORY: Version Naming Throughout Assembly
- All section files MUST use version numbers (e.g., introduction_v3.tex, not introduction_final.tex)
- Output files MUST be versioned (e.g., main_v1.pdf, not main_final.pdf)
- Supporting files MUST be versioned (e.g., title_suggestions_v1.md, ref_final_v1.bib)
- NEVER use descriptive suffixes like _final, _revised, _updated

## 📋 Prerequisites
Before starting final assembly, verify:
- [ ] All section PDFs have been reviewed and approved
- [ ] Latest version of each section .tex file is in output/
- [ ] All figures are in output/figures/
- [ ] All data tables are in output/data/
- [ ] Version log shows approval status for each section

## 🔧 Final Assembly Process

### Step 1: Generate Title Suggestions
```bash
cd output

# CRITICAL: Generate title options before final assembly
echo "Generating title suggestions based on research content..."

# Follow prompts/prompts_title_generation to:
# 1. Analyze the problem domain from approved sections
# 2. Identify the breakthrough/innovation from methods
# 3. Extract key achievements from results
# 4. Generate 5-7 title options
# 5. Create output/title_suggestions_v1.md with recommendations

# Review generated titles
cat title_suggestions_v1.md

# Select the best title for main_v1.tex (or appropriate version)
# The recommended title will be at the bottom of title_suggestions_v1.md
```

**IMPORTANT**: The title should:
- Clearly indicate the problem being solved
- Highlight the innovative approach
- Be appropriate for the competition/journal
- Be memorable and searchable

### Step 1.5: Scan for Required LaTeX Packages
```bash
cd output

# CRITICAL: Scan all section files for LaTeX commands that require specific packages
echo "Scanning section files for required LaTeX packages..."

# Run the package detection script
~/.venv/ml_31123121/bin/python ../utilityScripts/detect_required_packages.py

# This will:
# 1. Scan all section .tex files for LaTeX commands
# 2. Map commands to required packages
# 3. Compare with main.tex preamble
# 4. Generate package_requirements_report.json
# 5. List any missing packages

# Review the package requirements report
cat package_requirements_report.json

# If missing packages are detected, update main.tex preamble BEFORE final compilation
echo "Checking for missing packages..."
if [ -f "missing_packages.txt" ]; then
    echo "⚠️  WARNING: Missing packages detected!"
    cat missing_packages.txt
    echo "Add these packages to main.tex preamble before compilation!"
fi
```

**IMPORTANT**: Common packages that might be missing:
- `subcaption` - Required for subfigures
- `graphicx` - Required for includegraphics (also add `\graphicspath{{figures/}}`)
- `algorithm, algorithmic` - Required for algorithm environments
- `booktabs` - Required for professional table rules
- `tikz` - Required for diagrams
- `amsmath, amssymb` - Required for advanced mathematics

### Step 2: Detect Latest Version of Each Section
```bash
cd output

# CRITICAL: Use the detection script with content analysis
echo "Detecting BEST version of each section file based on content completeness..."
~/.venv/ml_31123121/bin/python ../utilityScripts/detect_latest_sections.py \
  --output-dir . \
  --paper-type competition \
  --analyze-content  # NEW: Analyzes content, not just modification time

# This will:
# 1. Scan for all versions of each section (e.g., methods.tex, methods_modified.tex, methods_v3.tex)
# 2. Analyze content metrics: citations, file size, equations, figures
# 3. Score each version for content completeness
# 4. Recommend the BEST version, not just the latest
# 5. Save analysis to section_detection_report.json and assembly_decisions.log

# Review the detection report
cat section_detection_report.json
cat assembly_decisions.log  # NEW: Explains WHY each version was selected
```

**IMPORTANT**: The detection script handles various naming patterns:
- `section.tex` (original)
- `section_modified.tex` (first modification)
- `section_v2.tex`, `section_v3.tex` (numbered versions)
- `section_revised.tex` (revision)
- `section_final.tex` (final version)
- `section_approved.tex` (approved version)

### Step 2.5: Verify Content Completeness
**CRITICAL**: Before creating clean versions, verify the selected files contain all necessary content:

```bash
# For each section, check for citations
for section in introduction methods resultsAndDiscussions conclusions; do
    echo "Checking $section for citations..."
    grep -c "\\cite{" ${section}*.tex | sort -t: -k2 -nr
done

# Check for figures and tables
echo "Checking for figure references..."
for section in methods resultsAndDiscussions; do
    echo "$section figures:"
    grep -c "\\includegraphics\|\\ref{fig:" ${section}*.tex | sort -t: -k2 -nr
done

# Check file sizes (dramatic reduction might indicate content loss)
echo "File sizes comparison:"
ls -la *.tex | grep -E "(introduction|methods|results|conclusions)" | sort -k5 -nr

# If newer versions have fewer citations than older versions, investigate!
# The "latest" file might be missing important content

# Decision Tree:
# - If latest version has fewer citations → Compare content with older versions
# - If content is missing → Use the older, more complete version
# - Document your choice in assembly_decisions.log

# If you need to override the automatic selection:
echo "MANUAL OVERRIDE: Using methods_v2.tex instead of methods_v3.tex - v3 missing 15 citations" >> assembly_decisions.log
```

**WARNING**: Common content loss scenarios:
- Revision removed literature review citations
- Figure captions deleted accidentally  
- Mathematical equations simplified too much
- Subsections merged losing detail
- References to appendices removed

### Step 2.6: Summarize Final Section Files
**IMPORTANT**: Create a summary document listing all final .tex files that will be used in the main.pdf compilation.

```bash
# Generate a summary of all final section files
echo "Creating summary of final section files..."

# Create a summary file
cat > final_sections_summary.md << 'EOF'
# Final Section Files Summary
Generated on: $(date)

## Sections Used in Final main.pdf Compilation:

EOF

# Add detection results to summary
~/.venv/ml_31123121/bin/python -c "
import json
import os

with open('section_detection_report.json', 'r') as f:
    report = json.load(f)

with open('final_sections_summary.md', 'a') as out:
    for section, info in report['detected_sections'].items():
        filename = info['latest_file']
        file_size = os.path.getsize(filename) if os.path.exists(filename) else 0
        out.write(f'### {section.title()}\n')
        out.write(f'- **File**: `{filename}`\n')
        out.write(f'- **Version**: {info.get(\"version\", \"1\")}\n')
        out.write(f'- **Size**: {file_size:,} bytes\n')
        out.write(f'- **Content Score**: {info.get(\"content_score\", \"N/A\")}\n')
        out.write(f'- **Citations**: {info.get(\"citation_count\", 0)}\n')
        out.write(f'- **Figures**: {info.get(\"figure_count\", 0)}\n')
        out.write(f'- **Equations**: {info.get(\"equation_count\", 0)}\n')
        out.write(f'- **Selection Reason**: {info.get(\"selection_reason\", \"Latest version\")}\n')
        out.write(f'\\n')
    
    # Add clean file mapping if applicable
    out.write('## Clean Files for Final Compilation:\\n\\n')
    for section in ['summary', 'letter', 'introduction', 'methods', 
                   'resultsAndDiscussions', 'conclusions', 'appendixCodes', 
                   'appendixAIReport', 'abstract']:
        if any(s['latest_file'].startswith(section) for s in report['detected_sections'].values()):
            out.write(f'- `{section}_clean.tex` (without review checklist)\\n')
"

# Add bibliography information
echo -e "\n## Bibliography Files:\n" >> final_sections_summary.md
echo "- **Master Bibliography**: ref.bib ($(grep -c '@' ref.bib 2>/dev/null || echo 0) entries)" >> final_sections_summary.md
echo "- **Section Bibliographies**:" >> final_sections_summary.md
for bib in *_refs.bib; do
    if [ -f "$bib" ]; then
        count=$(grep -c '@' "$bib")
        echo "  - $bib: $count entries" >> final_sections_summary.md
    fi
done
echo "- **Final Merged**: ref_final.bib (will contain all unique entries)" >> final_sections_summary.md

# Add figure and data file counts
echo -e "\n## Supporting Files:\n" >> final_sections_summary.md
echo "- **Figures**: $(ls figures/*.png figures/*.pdf 2>/dev/null | wc -l) files in figures/" >> final_sections_summary.md
echo "- **Data Tables**: $(ls data/*.csv 2>/dev/null | wc -l) files in data/" >> final_sections_summary.md
echo "- **Code Files**: $(ls codes/*.py 2>/dev/null | wc -l) files in codes/" >> final_sections_summary.md

# Display the summary
echo "Summary created in final_sections_summary.md"
cat final_sections_summary.md
```

**VERIFICATION**: This summary helps ensure:
1. All required sections are present
2. Latest versions are being used
3. File sizes are reasonable (not accidentally truncated)
4. Content metrics match expectations
5. Supporting files are available

### 🛑 STOP - Section Summary Review

**CRITICAL: Review the section summary BEFORE proceeding!**

```bash
# Display the summary for user review
echo "============================================"
echo "STOP! Please review the section summary:"
echo "============================================"
cat final_sections_summary.md
echo "============================================"
echo "Please verify:"
echo "1. All expected sections are listed"
echo "2. File versions are correct (no accidental old versions)"
echo "3. Content metrics look reasonable"
echo "4. No sections show suspiciously small file sizes"
echo "5. All supporting files are accounted for"
echo ""
echo "If any issues, STOP and fix before continuing!"
echo "============================================"
```

**DO NOT PROCEED until user confirms the section summary is correct!**

### Step 3: Merge All Bibliographies
```bash
# Use the automated merger utility
~/.venv/ml_31123121/bin/python ../utilityScripts/merge_bibliographies.py \
  --output ref_final.bib

# Verify the merge
echo "Total bibliography entries: $(grep -c '@' ref_final.bib)"

# Check for any missing .bib files
ls -la *_refs.bib
```

### Step 4: Configure main.tex with Latest Files

**CRITICAL**: Use the detected latest versions from section_detection_report.json but exclude review checklists

**CRITICAL**: Before configuring main.tex content, ensure the preamble includes ALL required packages:
```latex
% ESSENTIAL: Add all packages detected in Step 1.5
\usepackage{graphicx}
\graphicspath{{figures/}}  % CRITICAL for finding figures
\usepackage{subcaption}    % If any section uses subfigures
\usepackage{amsmath,amssymb} % For mathematical content
\usepackage{algorithm,algorithmic} % If any section has algorithms
\usepackage{booktabs}      % For professional tables
\usepackage{tikz}          % If any diagrams are present
% ... other packages as detected ...
```

**IMPORTANT**: When setting up main.tex, do NOT include the review checklist sections that appear at the end of each section file. The checklists remain in the .tex files but are excluded using ONE of these methods:

**CRITICAL**: Also exclude any "Reference Verification Summary" sections that appear in review checklists (especially in introduction sections). These summaries are ONLY for review PDFs and MUST NOT appear in the final main.pdf.

### Method 1: Create Clean Files (RECOMMENDED)
```bash
# For each section file, create a clean version without the checklist
# Example for introduction.tex:
python -c "
with open('introduction.tex', 'r') as f:
    content = f.read()
# Find the checklist marker and extract content before it
if '%% BEGIN REVIEW CHECKLIST' in content:
    clean_content = content.split('%% BEGIN REVIEW CHECKLIST')[0]
else:
    # If no marker, look for the checklist section header
    clean_content = content.split('\\\\section*{========== SECTION REVIEW CHECKLIST')[0]
    
# CRITICAL: Also remove any Reference Verification Summary
if '\\\\section*{Reference Verification Summary}' in clean_content:
    clean_content = clean_content.split('\\\\section*{Reference Verification Summary}')[0]
with open('introduction_clean.tex', 'w') as f:
    f.write(clean_content.strip())
"

# Then in main.tex, use:
# \input{introduction_clean}  # NOT introduction
```

### Method 2: Use Special LaTeX Input (if supported)
```latex
% Define a custom input command that stops at the marker
\newcommand{\inputbeforemarker}[1]{%
  % This requires custom LaTeX processing
  % Most standard LaTeX doesn't support this directly
}
```

### Method 3: Manual Content Extraction
Simply copy the content (excluding checklists) when creating main.tex

**WARNING**: DO NOT delete checklists from original .tex files - they're needed for section review PDFs!

#### Read Detection Report and Update main.tex:
```bash
# Extract the recommended \input commands from the detection report
echo "Extracting recommended \input commands..."
~/.venv/ml_31123121/bin/python -c "
import json
with open('section_detection_report.json', 'r') as f:
    report = json.load(f)
    print('\\n'.join(report['latex_inputs'].values()))
"
```

#### For Competition Papers:
```latex
\documentclass{mcmthesis} % or appropriate class
% ... preamble ...

% CRITICAL: Set the title from title_suggestions_v1.md
\title{Your Selected Title from title_suggestions_v1.md}
% Example: \title{Hybrid Neural-Evolutionary Framework for Urban Traffic Optimization: A Multi-Scale Approach}

\begin{document}

% IMPORTANT: Use the latest versions detected by the script!
% Example based on detection results:

% Front matter
\input{summary_final}        % If summary_final.tex was detected as latest
\input{letter_v3}           % If letter_v3.tex was detected as latest

% Main content
\input{introduction_revised} % If introduction_revised.tex was detected
\input{methods_v4}          % If methods_v4.tex was detected
\input{resultsAndDiscussions_modified} % If modified version was latest
\input{conclusions_approved} % If conclusions_approved.tex was detected

% Appendices
\appendix
\input{appendixCodes_v2}    % If appendixCodes_v2.tex was detected
\input{appendixAIReport}    % If original was the only/latest version

% Bibliography - using merged file
\bibliographystyle{ieee}
\bibliography{ref_final} % NOT ref.bib!

\end{document}
```

**NOTE**: The actual filenames will depend on what the detection script finds!

#### For Journal Papers:
```latex
\documentclass[preprint]{elsarticle} % or appropriate class
% ... preamble with author info ...

% CRITICAL: Set the title from title_suggestions_v1.md
\title{Your Selected Title from title_suggestions_v1.md}
% Example: \title{Adaptive Hyperbolic Embeddings: A Novel Framework for Large-Scale Graph Analysis with Linear Complexity}

\begin{document}

% IMPORTANT: Use the latest versions detected by the script!
% Example based on detection results:

\begin{abstract}
\input{abstract_v2}         % If abstract_v2.tex was detected as latest
\end{abstract}

% Keywords
\begin{keyword}
keyword1 \sep keyword2 \sep keyword3
\end{keyword}

% Main content
\input{introduction_final}   % If introduction_final.tex was detected
\input{methods_revised}      % If methods_revised.tex was detected
\input{resultsAndDiscussions_v3} % If v3 was the latest version
\input{conclusions_modified} % If conclusions_modified.tex was detected

% Appendices if any
\appendix
\input{appendixAIReport_v2}  % If appendixAIReport_v2.tex was detected

% Bibliography - using merged file
\bibliography{ref_final} % NOT ref.bib!

\end{document}
```

**AUTOMATED APPROACH**: Instead of manually updating, use this script:
```python
# generate_main_tex.py - Auto-generate main.tex with latest files
import json

with open('section_detection_report.json', 'r') as f:
    report = json.load(f)

# Read template and replace placeholders
with open('../templates/main_template.tex', 'r') as f:
    template = f.read()

# Replace each section with detected latest version
for section, info in report['detected_sections'].items():
    filename = info['latest_file'][:-4]  # Remove .tex
    template = template.replace(f'\\input{{{section}}}', f'\\input{{{filename}}}')

# Save updated main.tex
with open('main.tex', 'w') as f:
    f.write(template)
```

### Step 5: Compile Final PDF
```bash
# First compilation
pdflatex main.tex

# Bibliography compilation
biber main  # or bibtex main depending on template

# Final compilations to resolve references
pdflatex main.tex
pdflatex main.tex

# Check for errors
grep -i "error\|warning.*undefined" main.log
```

### Step 6: Final Verification
```bash
# Check PDF was created
if [ -f "main.pdf" ]; then
    echo "✓ main.pdf created successfully"
    echo "  Size: $(du -h main.pdf | cut -f1)"
    echo "  Pages: $(pdfinfo main.pdf | grep Pages | awk '{print $2}')"
else
    echo "✗ PDF compilation failed!"
fi

# Run final verification script if available
if [ -f "../utilityScripts/master_verification.py" ]; then
    ~/.venv/ml_31123121/bin/python ../utilityScripts/master_verification.py
fi
```

### Step 7: Post-Compilation File Listing (MANDATORY)
**CRITICAL**: After successful PDF compilation, generate and display a comprehensive summary of all files used.

```bash
# Generate compilation summary with timestamp
echo "==============================================="
echo "GENERATING POST-COMPILATION FILE LISTING..."
echo "==============================================="

cat > main_compilation_summary.md << EOF
# Main.pdf Compilation Summary
Generated on: $(date)
PDF: main.pdf ($(du -h main.pdf | cut -f1))

## LaTeX Section Files Used:
EOF

# Extract and display all \input commands from main.tex
echo "### Files included via \\input commands:" >> main_compilation_summary.md
grep -E "\\\\input\{[^}]+\}" main.tex | while read -r line; do
    file=$(echo "$line" | sed 's/.*\\input{\([^}]*\)}.*/\1.tex/')
    if [ -f "$file" ]; then
        size=$(du -h "$file" | cut -f1)
        lines=$(wc -l < "$file")
        citations=$(grep -c "\\cite{" "$file" 2>/dev/null || echo 0)
        echo "- $file: $size, $lines lines, $citations citations" >> main_compilation_summary.md
    else
        echo "- $file: [FILE NOT FOUND]" >> main_compilation_summary.md
    fi
done

# Add bibliography information
echo -e "\n## Bibliography Files:" >> main_compilation_summary.md
bib_file=$(grep -E "\\\\bibliography\{[^}]+\}" main.tex | sed 's/.*\\bibliography{\([^}]*\)}.*/\1.bib/')
if [ -f "$bib_file" ]; then
    entries=$(grep -c "^@" "$bib_file" 2>/dev/null || echo 0)
    echo "- $bib_file: $(du -h "$bib_file" | cut -f1), $entries entries" >> main_compilation_summary.md
else
    echo "- $bib_file: [FILE NOT FOUND]" >> main_compilation_summary.md
fi

# List figure files referenced
echo -e "\n## Figure Files Referenced:" >> main_compilation_summary.md
grep -h "\\includegraphics" *.tex 2>/dev/null | sed 's/.*{\([^}]*\)}.*/\1/' | sort -u | while read -r fig; do
    # Check common extensions
    for ext in .png .pdf .jpg .jpeg .eps; do
        if [ -f "figures/${fig}${ext}" ]; then
            echo "- figures/${fig}${ext}: $(du -h "figures/${fig}${ext}" | cut -f1)" >> main_compilation_summary.md
            break
        elif [ -f "${fig}${ext}" ]; then
            echo "- ${fig}${ext}: $(du -h "${fig}${ext}" | cut -f1)" >> main_compilation_summary.md
            break
        fi
    done
done

# Summary statistics
echo -e "\n## Summary Statistics:" >> main_compilation_summary.md
echo "- Total sections: $(grep -c "\\\\input{" main.tex)" >> main_compilation_summary.md
echo "- Total citations: $(grep -h "\\cite{" *.tex 2>/dev/null | wc -l)" >> main_compilation_summary.md
echo "- Total figures: $(grep -h "\\includegraphics" *.tex 2>/dev/null | wc -l)" >> main_compilation_summary.md
echo "- PDF size: $(du -h main.pdf | cut -f1)" >> main_compilation_summary.md
echo "- PDF pages: $(pdfinfo main.pdf 2>/dev/null | grep Pages | awk '{print $2}' || echo 'N/A')" >> main_compilation_summary.md

# Display the summary on screen
echo ""
echo "==============================================="
echo "POST-COMPILATION FILE LISTING:"
echo "==============================================="
cat main_compilation_summary.md
echo "==============================================="
echo "Summary saved to: main_compilation_summary.md"
echo "==============================================="
```

**IMPORTANT NOTES**:
1. This summary MUST be generated immediately after successful PDF compilation
2. The summary MUST be displayed on screen for user review
3. The summary MUST be saved to `main_compilation_summary.md`
4. This step is MANDATORY - do not skip it!

## ⚠️ Common Issues and Solutions

### Missing Citations
If you see "undefined references" warnings:
1. Check that ref_final.bib was created properly
2. Verify main.tex uses `\bibliography{ref_final}`
3. Ensure biber/bibtex ran successfully

### Missing Figures
If figures are not found:
1. Check `\graphicspath{{figures/}}` is set in preamble
2. Verify all figures exist in output/figures/
3. Check figure filenames match exactly (case-sensitive)

### Section Not Appearing
If a section is missing from the PDF:
1. **Check version mismatch**: Run the detection script to ensure main.tex uses the latest version
   ```bash
   ~/.venv/ml_31123121/bin/python ../utilityScripts/detect_latest_sections.py
   ```
2. Verify the `\input{section}` command matches the detected filename (e.g., `\input{methods_v3}` not `\input{methods}`)
3. Check the actual .tex file exists: `ls -la *methods*.tex`
4. Look for LaTeX errors specific to that section in main.log

### Page Layout Issues
If formatting looks wrong:
1. Ensure using correct document class
2. Check that template .cls files are copied
3. Verify single-column format is specified

## 📝 Important Reminders

1. **DO NOT REGENERATE CONTENT**: All sections have already been written and approved
2. **USE EXISTING FILES**: The assembly process only combines existing .tex files
3. **MERGED BIBLIOGRAPHY**: Always use ref_final.bib, not individual section bibliographies
4. **CHECK EVERYTHING**: Run verification before declaring complete
5. **CHECKLISTS EXCLUDED**: Review checklists in section files are excluded from main.pdf by using clean versions or stopping before the checklist marker (see Method 1 above)

## 🎉 Completion Checklist

After assembly, verify:
- [ ] PDF opens without errors
- [ ] All sections are present and in correct order
- [ ] Page numbers are sequential
- [ ] All figures and tables appear correctly
- [ ] Bibliography includes all citations
- [ ] **All required LaTeX packages are included in main.tex**
- [ ] **No "Undefined control sequence" errors related to missing packages**
- [ ] No LaTeX errors in log file
- [ ] Format matches competition/journal requirements
- [ ] File size is reasonable for submission
- [ ] final_sections_summary.md exists and lists all used files
- [ ] Summary shows reasonable content metrics for each section
- [ ] **main_compilation_summary.md generated and displayed on screen**
- [ ] **Post-compilation file listing reviewed and saved**

## 📄 Post-Compilation File Listing

After successfully compiling main.pdf, you MUST display AND save a comprehensive list of all files used:

```bash
# Generate compilation summary with timestamp
echo "==============================================="
echo "GENERATING POST-COMPILATION FILE LISTING..."
echo "==============================================="

cat > main_compilation_summary.md << EOF
# Main.pdf Compilation Summary
Generated on: $(date)
PDF: main.pdf ($(du -h main.pdf | cut -f1))

## LaTeX Section Files Used:
EOF

# Extract and display all \input commands from main.tex
echo "### Files included via \\input commands:" >> main_compilation_summary.md
grep -E "\\\\input\{[^}]+\}" main.tex | while read -r line; do
    file=$(echo "$line" | sed 's/.*\\input{\([^}]*\)}.*/\1.tex/')
    if [ -f "$file" ]; then
        size=$(du -h "$file" | cut -f1)
        lines=$(wc -l < "$file")
        citations=$(grep -c "\\cite{" "$file" 2>/dev/null || echo 0)
        echo "- $file: $size, $lines lines, $citations citations" >> main_compilation_summary.md
    else
        echo "- $file: [FILE NOT FOUND]" >> main_compilation_summary.md
    fi
done

# Add bibliography information
echo -e "\n## Bibliography Files:" >> main_compilation_summary.md
bib_file=$(grep -E "\\\\bibliography\{[^}]+\}" main.tex | sed 's/.*\\bibliography{\([^}]*\)}.*/\1.bib/')
if [ -f "$bib_file" ]; then
    entries=$(grep -c "^@" "$bib_file" 2>/dev/null || echo 0)
    echo "- $bib_file: $(du -h "$bib_file" | cut -f1), $entries entries" >> main_compilation_summary.md
else
    echo "- $bib_file: [FILE NOT FOUND]" >> main_compilation_summary.md
fi

# List figure files referenced
echo -e "\n## Figure Files Referenced:" >> main_compilation_summary.md
grep -h "\\includegraphics" *.tex 2>/dev/null | sed 's/.*{\([^}]*\)}.*/\1/' | sort -u | while read -r fig; do
    # Check common extensions
    for ext in .png .pdf .jpg .jpeg .eps; do
        if [ -f "figures/${fig}${ext}" ]; then
            echo "- figures/${fig}${ext}: $(du -h "figures/${fig}${ext}" | cut -f1)" >> main_compilation_summary.md
            break
        elif [ -f "${fig}${ext}" ]; then
            echo "- ${fig}${ext}: $(du -h "${fig}${ext}" | cut -f1)" >> main_compilation_summary.md
            break
        fi
    done
done

# Summary statistics
echo -e "\n## Summary Statistics:" >> main_compilation_summary.md
echo "- Total sections: $(grep -c "\\\\input{" main.tex)" >> main_compilation_summary.md
echo "- Total citations: $(grep -h "\\cite{" *.tex 2>/dev/null | wc -l)" >> main_compilation_summary.md
echo "- Total figures: $(grep -h "\\includegraphics" *.tex 2>/dev/null | wc -l)" >> main_compilation_summary.md
echo "- PDF size: $(du -h main.pdf | cut -f1)" >> main_compilation_summary.md
echo "- PDF pages: $(pdfinfo main.pdf 2>/dev/null | grep Pages | awk '{print $2}' || echo 'N/A')" >> main_compilation_summary.md

# Display the summary on screen
echo ""
echo "==============================================="
echo "POST-COMPILATION FILE LISTING:"
echo "==============================================="
cat main_compilation_summary.md
echo "==============================================="
echo "Summary saved to: main_compilation_summary.md"
echo "==============================================="
```

**CRITICAL**: This summary MUST be:
1. Generated immediately after successful PDF compilation
2. Displayed on screen for user review
3. Saved to `main_compilation_summary.md` for reference
4. Presented BEFORE closing the compilation process

**Remember**: The final assembly is just combining pre-approved pieces - like assembling a puzzle where all pieces have already been checked!

## Additional Details from CLAUDE.md

### 🛑 CRITICAL: Section Summary Review
Before final compilation, you MUST:
1. Create `final_sections_summary.md` listing all .tex files
2. Review the summary to verify correct versions
3. Present summary to user for approval
4. WAIT for user confirmation before proceeding

Example final_sections_summary.md:
```markdown
# Final Sections Summary for Main PDF Assembly

## Detected Section Files:
- abstract.tex (approved v2)
- introduction.tex (approved v3)
- methods.tex (approved v1)
- resultsAndDiscussions.tex (approved v2)
- conclusions.tex (approved v1)
- appendixAIReport.tex (approved v1)

## Bibliography Files:
- ref.bib (master bibliography)
- Will merge all section-specific bibliographies

## Main Document:
- main.tex (will be updated with above sections)

## Status: READY FOR FINAL ASSEMBLY
Please confirm these are the correct versions before proceeding.
```

### Bibliography Merging Procedures
When merging section bibliographies for final PDF:

```bash
# Step 1: Collect all section-specific bibliographies
cd output
ls *_refs.bib

# Step 2: Merge into master bibliography
cat introduction_refs.bib methods_refs.bib results_refs.bib conclusions_refs.bib > merged_refs.bib

# Step 3: Remove duplicates
~/.venv/ml_31123121/bin/python ../utilityScripts/deduplicate_bibliography.py \
  --input merged_refs.bib --output ref_final.bib

# Step 4: Update main.tex to use ref_final
sed -i 's/\\bibliography{ref}/\\bibliography{ref_final}/' main.tex
```

### Checklist Exclusion Methods
Remove review checklists from final PDF:

```bash
# Method 1: Use sed to remove checklist sections
sed -i '/% REVIEW CHECKLIST START/,/% REVIEW CHECKLIST END/d' *.tex

# Method 2: Use conditional compilation
# In main.tex preamble:
\newif\ifshowchecklist
\showchecklistfalse  % Set to false for final PDF

# In section files:
\ifshowchecklist
% Checklist content here
\fi
```

### Complete Assembly Commands
Full sequence for final assembly:

```bash
cd output

# 1. Generate title
# [Follow title generation process]

# 2. Detect required packages
~/.venv/ml_31123121/bin/python ../utilityScripts/detect_required_packages.py

# 3. Detect best versions
~/.venv/ml_31123121/bin/python ../utilityScripts/detect_latest_sections.py --analyze-content

# 4. Create section summary
# [Create final_sections_summary.md]

# 5. Get user approval
echo "Please review final_sections_summary.md and confirm"

# 6. Clean checklists
# [Remove review checklists]

# 7. Merge bibliographies
# [Merge all section bibs]

# 8. Update main.tex
# [Update with selected title and ensure all packages]

# 9. Compile final PDF
pdflatex main
bibtex main
pdflatex main
pdflatex main

# 10. Display file listing
# [Run file listing script]
```

### Post-Compilation File Listing Script
Complete bash script for generating file listing:

```bash
#!/bin/bash
# generate_file_listing.sh

echo "📊 FINAL COMPILATION FILE LISTING"
echo "Generated: $(date)"
echo "================================="
echo ""
echo "## LaTeX Source Files Used:"
for tex in *.tex; do
    if [[ -f "$tex" && "$tex" != "*_wrapper.tex" ]]; then
        echo "- $tex ($(wc -l < "$tex") lines)"
    fi
done

echo ""
echo "## Bibliography Files:"
for bib in *.bib; do
    if [[ -f "$bib" ]]; then
        entries=$(grep -c "@" "$bib" || echo "0")
        echo "- $bib ($entries entries)"
    fi
done

echo ""
echo "## Figure Files:"
if [[ -d "figures" ]]; then
    fig_count=$(ls figures/*.{png,jpg,pdf,eps} 2>/dev/null | wc -l)
    echo "- Total figures: $fig_count"
    ls figures/*.{png,jpg,pdf,eps} 2>/dev/null | head -10
    if [[ $fig_count -gt 10 ]]; then
        echo "  ... and $((fig_count - 10)) more"
    fi
fi

echo ""
echo "## Generated PDFs:"
ls *.pdf | grep -v "_wrapper.pdf"

echo ""
echo "## Summary Statistics:"
echo "- Total .tex files: $(ls *.tex | wc -l)"
echo "- Total citations: $(grep -h "\\\\cite{" *.tex | wc -l)"
echo "- Main PDF size: $(du -h main.pdf | cut -f1)"
echo "- Compilation completed: $(date)"

# Save to file
echo ""
echo "Saving this summary to main_compilation_summary.md..."
```