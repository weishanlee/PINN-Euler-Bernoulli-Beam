# Package Requirements Management for LaTeX Compilation

This prompt provides guidance for tracking and managing LaTeX package dependencies across section files to ensure successful final PDF compilation.

## Overview

When writing section files independently, each section may use LaTeX commands that require specific packages. These package dependencies must be:
1. Documented in each section file
2. Detected before final compilation
3. Included in main.tex preamble

## Package Documentation Format

At the top of EVERY section tex file, include a comment block documenting required packages:

```latex
% Package requirements for this section:
% - subcaption (for subfigures)
% - graphicx (for includegraphics)
% - amsmath (for advanced equations)
% - algorithm, algorithmic (for algorithms)
% - tikz (for diagrams)
% - booktabs (for professional tables)
```

## Common LaTeX Commands and Their Required Packages

### Graphics and Figures
- `\includegraphics` → `graphicx` + `\graphicspath{{figures/}}`
- `\begin{subfigure}` → `subcaption`
- `\subfloat` → `subfig` (alternative to subcaption)
- `\begin{tikzpicture}` → `tikz`
- `\includepdf` → `pdfpages`

**Common Setup Example:**
```latex
% If using \subfigure → needs \usepackage{subcaption}
% If using \includegraphics → needs \usepackage{graphicx} and \graphicspath{{figures/}}
% If using algorithms → needs \usepackage{algorithm,algorithmic}
% If using advanced math → needs \usepackage{amsmath,amssymb}
```

### Mathematics
- `\begin{align}`, `\begin{equation*}` → `amsmath`
- `\mathbb`, `\mathcal` → `amssymb`
- `\DeclareMathOperator` → `amsmath`
- `\binom` → `amsmath`
- `\overset`, `\underset` → `amsmath`

### Algorithms
- `\begin{algorithm}` → `algorithm`
- `\begin{algorithmic}` → `algorithmic` or `algpseudocode`
- `\STATE`, `\IF`, `\FOR` → `algorithmic`
- `\Require`, `\Ensure` → `algorithmic`

### Tables
- `\toprule`, `\midrule`, `\bottomrule` → `booktabs`
- `\multirow` → `multirow`
- `\multicolumn` → (built-in, no package needed)
- `\begin{tabularx}` → `tabularx`
- `\begin{longtable}` → `longtable`

### Lists and Formatting
- `\begin{enumerate}[label=(\alph*)]` → `enumitem`
- `\textcolor` → `xcolor`
- `\href`, `\url` → `hyperref`
- `\lstlisting` → `listings`
- `\mint`, `\begin{minted}` → `minted`

### Citations and References
- `\citet`, `\citep` → `natbib`
- `\cite{*}` → (built-in with standard bibliography)
- `\printbibliography` → `biblatex`

## Package Detection Workflow

### Step 1: Manual Documentation
When writing each section, immediately document package requirements at the top of the file.

### Step 2: Automatic Detection
Before final compilation, run the package detection script:
```bash
cd output
~/.venv/ml_31123121/bin/python ../utilityScripts/detect_required_packages.py
```

### Step 3: Verification
The script will:
1. Scan all section .tex files
2. Detect LaTeX commands that require packages
3. Compare with main.tex preamble
4. Report missing packages

### Step 4: Update main.tex
Add any missing packages to main.tex preamble:
```latex
\documentclass{article}

% Essential packages
\usepackage{graphicx}
\usepackage{subcaption}
\usepackage{amsmath,amssymb}
\usepackage{algorithm,algorithmic}
\usepackage{booktabs}
\usepackage{hyperref}

% Graphics path
\graphicspath{{figures/}}
```

## Package Conflict Resolution

Some packages may conflict with each other. Common conflicts and solutions:

1. **subfig vs subcaption**: Use only one (prefer subcaption for newer documents)
2. **hyperref**: Should typically be loaded last
3. **cleveref**: Must be loaded after hyperref
4. **babel**: Load before most other packages

## Template-Specific Considerations

Different journal/competition templates may pre-load certain packages. Check the template's class file for:
- Pre-loaded packages (don't reload)
- Incompatible packages (avoid using)
- Recommended package options

## Example Implementation

### In introduction.tex:
```latex
% Package requirements for this section:
% - graphicx (for includegraphics)
% - subcaption (for subfigures)

\section{Introduction}

Recent advances in machine learning...

\begin{figure}[htbp]
    \centering
    \begin{subfigure}[b]{0.45\textwidth}
        \includegraphics[width=\textwidth]{figures/model_architecture.png}
        \caption{Model architecture}
    \end{subfigure}
    \begin{subfigure}[b]{0.45\textwidth}
        \includegraphics[width=\textwidth]{figures/results_comparison.png}
        \caption{Performance comparison}
    \end{subfigure}
    \caption{Overview of our approach}
\end{figure}
```

### In methods.tex:
```latex
% Package requirements for this section:
% - amsmath (for equations)
% - algorithm, algorithmic (for algorithms)
% - tikz (for diagrams)

\section{Methods}

Our approach uses the following optimization:
\begin{equation}
    \min_{\theta} \mathcal{L}(\theta) = \sum_{i=1}^{n} \ell(y_i, f_\theta(x_i)) + \lambda \|\theta\|_2^2
\end{equation}

\begin{algorithm}
\caption{Optimization Algorithm}
\begin{algorithmic}[1]
\Require Training data $\{(x_i, y_i)\}_{i=1}^n$, learning rate $\alpha$
\Ensure Optimized parameters $\theta^*$
\State Initialize $\theta_0$ randomly
\For{$t = 1$ to $T$}
    \State Compute gradient $g_t = \nabla_\theta \mathcal{L}(\theta_{t-1})$
    \State Update $\theta_t = \theta_{t-1} - \alpha g_t$
\EndFor
\State \Return $\theta_T$
\end{algorithmic}
\end{algorithm}
```

### In results.tex:
```latex
% Package requirements for this section:
% - graphicx (for includegraphics)
% - booktabs (for professional tables)
% - subcaption (for subfigures)

\section{Results}

Table~\ref{tab:results} shows our performance metrics.

\begin{table}[htbp]
\centering
\caption{Performance comparison}
\label{tab:results}
\begin{tabular}{lcc}
\toprule
Method & Accuracy & F1-Score \\
\midrule
Baseline & 0.82 & 0.79 \\
Our Method & \textbf{0.91} & \textbf{0.89} \\
\bottomrule
\end{tabular}
\end{table}
```

## Verification Checklist

Before final compilation:
- [ ] Each section file has package requirements documented
- [ ] Package detection script has been run
- [ ] All detected packages are in main.tex
- [ ] Package loading order is correct
- [ ] No package conflicts exist
- [ ] Graphics path is set if using images
- [ ] Template compatibility verified

## Common Issues and Solutions

### Issue: "Undefined control sequence"
**Solution**: Missing package for the command. Check package mapping above.

### Issue: "File not found" for images
**Solution**: Add `\graphicspath{{figures/}}` after loading graphicx.

### Issue: "Option clash for package"
**Solution**: Package loaded twice with different options. Load once with all needed options.

### Issue: Compilation fails with subfigures
**Solution**: Ensure using either subfig OR subcaption, not both.

## Prevention Strategy

1. **Document immediately**: As you write LaTeX commands, document the package
2. **Test incrementally**: Compile section PDFs to catch missing packages early
3. **Use standard packages**: Stick to well-known packages when possible
4. **Check template docs**: Review what packages the template provides
5. **Run detection script**: Use automated detection before final compilation

## Integration with Workflow

This package management system integrates with the incremental compilation workflow:

1. Write section → Document packages → Compile section PDF
2. If compilation fails → Add missing package to wrapper → Recompile
3. Before final assembly → Run detection script → Update main.tex
4. Final compilation includes all necessary packages

Remember: It's better to document too many package requirements than too few. The detection script will help identify what's actually needed.

## Package Requirement Headers from CLAUDE.md

Each section file should start with a package requirement comment:
```latex
% This section requires:
% - subcaption (for subfigures)
% - graphicx (for includegraphics)
% - amsmath (for equations)
```

## detect_required_packages.py Implementation

```python
#!/usr/bin/env python3
"""Detect LaTeX packages required by section files"""
import re
from pathlib import Path
import json

def scan_tex_files():
    """Scan all .tex files for LaTeX commands"""
    tex_files = Path('output').glob('*.tex')
    command_patterns = {
        r'\\includegraphics': 'graphicx',
        r'\\begin\{subfigure\}': 'subcaption',
        r'\\subfloat': 'subfig',
        r'\\begin\{algorithm\}': 'algorithm',
        r'\\begin\{algorithmic\}': 'algorithmic',
        r'\\toprule|\\midrule|\\bottomrule': 'booktabs',
        r'\\begin\{align\}|\\begin\{equation\*\}': 'amsmath',
        r'\\mathbb|\\mathcal': 'amssymb',
        r'\\href|\\url': 'hyperref',
        r'\\textcolor': 'xcolor',
        r'\\begin\{tikzpicture\}': 'tikz',
        r'\\multirow': 'multirow',
        r'\\begin\{tabularx\}': 'tabularx',
        r'\\begin\{longtable\}': 'longtable',
        r'\\lstlisting|\\begin\{lstlisting\}': 'listings',
        r'\\mint|\\begin\{minted\}': 'minted',
        r'\\citet|\\citep': 'natbib',
        r'\\printbibliography': 'biblatex'
    }
    
    required_packages = set()
    package_usage = {}
    
    for tex_file in tex_files:
        if tex_file.name == 'main.tex':
            continue
            
        content = tex_file.read_text()
        file_packages = set()
        
        for pattern, package in command_patterns.items():
            if re.search(pattern, content):
                required_packages.add(package)
                file_packages.add(package)
        
        # Check for graphics
        if 'graphicx' in file_packages and '\\includegraphics' in content:
            required_packages.add('graphicspath')
        
        package_usage[tex_file.name] = list(file_packages)
    
    return required_packages, package_usage

def check_main_tex():
    """Check which packages are already in main.tex"""
    main_tex = Path('output/main.tex')
    if not main_tex.exists():
        return set()
    
    content = main_tex.read_text()
    loaded_packages = set()
    
    # Find \usepackage commands
    package_pattern = r'\\usepackage(?:\[[^\]]*\])?\{([^}]+)\}'
    matches = re.findall(package_pattern, content)
    
    for match in matches:
        # Handle multiple packages in one command
        packages = [p.strip() for p in match.split(',')]
        loaded_packages.update(packages)
    
    # Check for graphicspath
    if '\\graphicspath' in content:
        loaded_packages.add('graphicspath')
    
    return loaded_packages

def generate_report(required_packages, package_usage, loaded_packages):
    """Generate package requirement report"""
    missing_packages = required_packages - loaded_packages
    
    report = {
        'required_packages': sorted(list(required_packages)),
        'loaded_packages': sorted(list(loaded_packages)),
        'missing_packages': sorted(list(missing_packages)),
        'package_usage_by_file': package_usage
    }
    
    # Save report
    with open('output/package_requirements.json', 'w') as f:
        json.dump(report, f, indent=2)
    
    # Print summary
    print("📦 LATEX PACKAGE REQUIREMENTS ANALYSIS")
    print("=" * 50)
    print(f"Total packages required: {len(required_packages)}")
    print(f"Packages in main.tex: {len(loaded_packages)}")
    print(f"Missing packages: {len(missing_packages)}")
    
    if missing_packages:
        print("\n⚠️  MISSING PACKAGES:")
        for pkg in sorted(missing_packages):
            if pkg == 'graphicspath':
                print(f"  - Add: \\graphicspath{{{{figures/}}}}")
            else:
                print(f"  - Add: \\usepackage{{{pkg}}}")
        
        print("\n📝 Add these to main.tex preamble before compilation!")
    else:
        print("\n✅ All required packages are included in main.tex")
    
    print("\n📊 Package usage by file:")
    for file, packages in package_usage.items():
        if packages:
            print(f"\n  {file}:")
            for pkg in sorted(packages):
                print(f"    - {pkg}")

if __name__ == "__main__":
    required, usage = scan_tex_files()
    loaded = check_main_tex()
    generate_report(required, usage, loaded)
```

## Critical Package Management Rules from CLAUDE.md

1. **Content-Driven Package Detection**: When writing section tex files, track which packages the content requires
2. **Package Documentation**: Comment at the top of each section file which packages it needs
3. **Main.tex Package Inclusion**: Ensure main.tex includes all packages required by section content:
   - If using \subfigure → needs \usepackage{subcaption}
   - If using \includegraphics → needs \usepackage{graphicx} and \graphicspath{{figures/}}
   - If using algorithms → needs \usepackage{algorithm,algorithmic}
   - If using advanced math → needs \usepackage{amsmath,amssymb}

## Package Verification Workflow from CLAUDE.md

Before final PDF compilation:
1. Scan all section files for LaTeX commands requiring packages
2. Map commands to required packages using `detect_required_packages.py`
3. Verify main.tex includes all identified packages
4. Add any missing packages to main.tex preamble

This ensures that when sections are combined in main.tex, all necessary packages are available and the compilation succeeds.