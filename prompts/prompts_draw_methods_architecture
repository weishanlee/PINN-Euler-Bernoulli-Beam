### Prompt â€” Generate Architecture & Mechanism Diagrams from Code and LaTeX Methods

## ðŸ›‘ Pre-Generation Planning Checklist

**MANDATORY**: Complete this checklist BEFORE creating any architecture diagram:
- [ ] Count total number of components/modules to display
- [ ] Identify hierarchical relationships (parent-child, peer-to-peer)
- [ ] Calculate required canvas dimensions using sizing calculator below
- [ ] Plan spacing strategy (minimum 30% horizontal, 40% vertical spacing)
- [ ] List all text labels and verify they fit in planned box sizes
- [ ] Design connection paths to avoid crossing boxes with 15% clearance
- [ ] Allocate legend/annotation space if needed

### Sizing and Spacing Calculator

Use these functions to properly size your architecture diagrams:

```python
import math

def calculate_box_size(text, base_width=3, base_height=1.5):
    """Calculate box dimensions based on text content"""
    lines = text.split('\n')
    max_chars = max(len(line) for line in lines)
    
    # Width: 0.15 units per character, minimum base_width
    width = max(base_width, max_chars * 0.15)
    
    # Height: 0.5 units per line, minimum base_height  
    height = max(base_height, len(lines) * 0.5 + 0.5)  # +0.5 for padding
    
    return width, height

def calculate_canvas_size(num_components, layout_type='grid'):
    """Pre-calculate required canvas size"""
    if layout_type == 'grid':
        cols = math.ceil(math.sqrt(num_components))
        rows = math.ceil(num_components / cols)
        # 4 units per component + 30% horizontal spacing
        width = cols * 4 * 1.3 + 2  # +2 for margins
        # 2 units per component + 40% vertical spacing
        height = rows * 2 * 1.4 + 2  # +2 for margins
    elif layout_type == 'hierarchical':
        # Assume max 4 components per layer
        layers = math.ceil(num_components / 4)
        width = 4 * 4 * 1.3 + 2
        height = layers * 2 * 1.4 + 2
    elif layout_type == 'linear':
        # Single row or column
        width = num_components * 4 * 1.3 + 2
        height = 2 * 1.4 + 2
    return width, height

# Example usage:
# For 9 components in grid layout:
# canvas_width, canvas_height = calculate_canvas_size(9, 'grid')
# For text "Data\nProcessing\nModule":
# box_width, box_height = calculate_box_size("Data\nProcessing\nModule")
```

## CRITICAL: Box Overlap Validation Requirements

**MANDATORY**: All workflow diagrams MUST pass the following validation checks:

1. **No Box Overlaps**: Two boxes must never overlap with each other
2. **No Text-Box Overlaps**: Standalone text must not overlap with boxes  
3. **Text Fit Validation**: Text inside boxes must fit with appropriate font size

Use the validation tools in `utilityScripts/`:
- `box_overlap_checker.py` - Validate existing layouts
- `smart_box_layout.py` - Create layouts with automatic overlap prevention

See `prompts/prompts_figure_box_validation` for detailed implementation.

You are an AI engineer tasked with visualizing our theorem's architecture and mechanisms. Follow these instructions exactly:

1. **Ingest Source Material**  
   - Load **all `.py` scripts** located in the folder `output/codes/`.  
   - Load the LaTeX file `output/methods.tex`.  
   - Parse and combine the logic, algorithms, and textual descriptions to form a unified understanding of the current theorem.

2. **Synthesize Key Concepts**  
   - Identify core components (functions, classes, data flows) from the Python scripts.  
   - Extract explanatory passages and equations from `output/methods.tex`.  
   - Map relationships between code components and theoretical elements.

3. **Create Visualizations**  
   - Draw **up to three** diagrams/flowcharts that clearly illustrate:  
     - The overall architecture of the system.  
     - The detailed mechanism(s) underpinning the theorem.  
     - Any data-flow or control-flow necessary for comprehension.  
   - Choose appropriate formats (e.g., UML, sequence diagram, directed acyclic graph, block diagram).  
   - Ensure diagrams are legible and logically organized.

4. **Output Requirements**  
   - Save each diagram as a **PNG** (300 dpi minimum) in the folder `output/figures/` with filenames:  
     - `architecture.png`  
     - `mechanism.png`  
     - `workflow.png` (if a third diagram is necessary)  
   - If fewer than three plots fully capture the content, omit the unused filenames.
   - **Font Requirements**: All text must be â‰¥10pt (no exceptions)
   - **Spacing Requirements**: 30% horizontal, 40% vertical between components

5. **Box Layout Validation** (MANDATORY)
   - Use `utilityScripts/smart_box_layout.py` for automatic overlap-free layouts
   - Validate all diagrams with `utilityScripts/box_overlap_checker.py`
   - Ensure minimum spacing of 0.2 units between all boxes
   - Automatically adjust font sizes to fit within box boundaries
   - Save validation reports alongside diagram files
   
   **ðŸ›‘ MANDATORY Validation Workflow:**
   ```bash
   # After generating each diagram:
   cd output
   ~/.venv/ml_31123121/bin/python ../utilityScripts/box_overlap_checker.py figures/architecture.png
   ~/.venv/ml_31123121/bin/python ../utilityScripts/box_overlap_checker.py figures/mechanism.png
   ~/.venv/ml_31123121/bin/python ../utilityScripts/box_overlap_checker.py figures/workflow.png
   
   # If ANY validation fails, regenerate with smart layout:
   ~/.venv/ml_31123121/bin/python ../utilityScripts/smart_box_layout.py figures/{failed_diagram}.png
   ```
   
   **Kill Switch**: If validation fails after 3 attempts, STOP and simplify the diagram

6. **Documentation**  
   - Provide a brief caption (â‰¤ 50 words) for each diagram, summarizing its purpose.  
   - Ensure captions can be directly inserted into LaTeX reports using the standard `\includegraphics` workflow.
   - Include validation status in documentation (e.g., "Validated: 0 overlaps detected")

7. **Reproducibility**  
   - Supply the Python code (e.g., Graphviz, Matplotlib, Mermaid-CLI) used to generate the diagrams.  
   - Store these code snippets in the folder `output/codes/` with clear filenames such as `generate_architecture_diagram.py`.
   - Include box validation code in the generation scripts

8. **Constraints**  
   - Do **not** exceed three diagrams in total.  
   - Avoid duplicating information across diagrams; each plot should add unique value.
   - ALL diagrams must pass overlap validation before saving

Execute all steps, save the files as specified, and confirm completion. Report any validation failures immediately.

