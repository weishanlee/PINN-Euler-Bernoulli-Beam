# Technical Setup Guide

## Overview
This document contains technical configuration details for the paper generation system, including virtual environments, package installations, and MCP tool setup.

## Virtual Environments

### Available Python Environments

```bash
# Machine Learning Environment
# Used for: data analysis, model training, visualization, general computation
~/.venv/ml_31123121/bin/python

# Web Scraping Environment  
# Used for: paper downloads, web scraping, arxiv/scholarly searches
~/.venv/webScraping/bin/python
```

### Environment Usage Examples

```bash
# Activate ML environment
source ~/.venv/ml_31123121/bin/activate

# Run analysis scripts
~/.venv/ml_31123121/bin/python output/codes/analysis.py
~/.venv/ml_31123121/bin/python output/codes/model_training.py --epochs 100

# Run web scraping
~/.venv/webScraping/bin/python utilityScripts/scrape_papers.py
~/.venv/webScraping/bin/python utilityScripts/download_arxiv.py
```

## MCP Tool Configuration

### Playwright MCP
For dynamic web content and browser automation:
```bash
claude mcp add playwright npx @playwright/mcp@latest
```

### Context7 MCP
For accessing state-of-the-art code implementations:
```bash
claude mcp add --transport http context7 https://mcp.context7.com/mcp
```

### MCP Usage Notes
- No consent needed for Playwright MCP operations
- No consent needed for Context7 MCP operations
- These tools are pre-configured for the paper generation workflow

## Package Requirements

### Web Scraping Environment Packages
```
requests
beautifulsoup4
selenium
scrapy
arxiv
scholarly
pdfplumber
PyPDF2
```

### ML Environment Packages
```
numpy
pandas
matplotlib
seaborn
scikit-learn
torch
torchvision
transformers
plotly
networkx
scipy
statsmodels
```

### LaTeX System Requirements
- Full LaTeX distribution (TeX Live or MiKTeX)
- Required for PDF compilation
- Must include common scientific packages

## Directory Structure

### Standard Output Directories
```
output/
├── codes/           # Generated Python scripts
├── data/            # Analysis results and datasets
├── figures/         # Generated figures and diagrams
├── papers/          # Downloaded research papers
│   ├── arxiv_papers/
│   └── journal_papers/
├── review_reports/  # External review results
└── *.tex           # LaTeX section files
```

### Utility Scripts Location
```
utilityScripts/
├── scrape_papers.py
├── extract_section_citations.py
├── detect_latest_sections.py
├── box_overlap_checker.py
├── smart_box_layout.py
└── master_verification.py
```

## Execution Guidelines

### Script Execution Order
1. Always check virtual environment activation
2. Run test mode first: `script.py --test`
3. Verify imports and dependencies
4. Execute in dependency order from execution_plan.json

### Common Execution Patterns
```bash
# Test first
~/.venv/ml_31123121/bin/python output/codes/analysis.py --test

# Then run full execution
~/.venv/ml_31123121/bin/python output/codes/analysis.py

# Monitor progress
tail -f output/execution_status.json
```

## Troubleshooting

### Virtual Environment Issues
- If environment not found: Check path exists with `ls ~/.venv/`
- If packages missing: Activate env and run `pip install -r requirements.txt`
- If permission denied: Check file permissions with `ls -la`

### MCP Tool Issues
- If MCP not responding: Restart Claude Code
- If web scraping fails: Check internet connection and proxy settings
- If Context7 timeout: Retry with smaller code requests

### LaTeX Compilation Issues
- If package not found: Install missing LaTeX packages
- If compilation fails: Check log files in output directory
- If figures missing: Verify \graphicspath{{figures/}} is set